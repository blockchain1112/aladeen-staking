{"version":3,"file":"init-entry-stake-receipts.test.js","sourceRoot":"","sources":["../../../tests/stake-receipts/init-entry-stake-receipts.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { getAccount, getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport type { Transaction } from \"@solana/web3.js\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  createStakeEntryAndStakeMint,\n  createStakePool,\n  stake,\n  unstake,\n} from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEditionTx, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\nlet provider: CardinalProvider;\nlet originalMintTokenAccountId: PublicKey;\nlet originalMintId: PublicKey;\nlet stakePoolId: PublicKey;\n\nbeforeAll(async () => {\n  provider = await getProvider();\n\n  const mintKeypair = Keypair.generate();\n  originalMintId = mintKeypair.publicKey;\n  originalMintTokenAccountId = getAssociatedTokenAddressSync(\n    originalMintId,\n    provider.wallet.publicKey\n  );\n  await executeTransaction(\n    provider.connection,\n    await createMasterEditionTx(\n      provider.connection,\n      mintKeypair.publicKey,\n      provider.wallet.publicKey\n    ),\n    provider.wallet,\n    { signers: [mintKeypair] }\n  );\n});\n\nit(\"Create Pool\", async () => {\n  let transaction: Transaction;\n  [transaction, stakePoolId] = await createStakePool(\n    provider.connection,\n    provider.wallet,\n    {}\n  );\n  await executeTransaction(provider.connection, transaction, provider.wallet);\n});\n\nit(\"Init stake entry and mint\", async () => {\n  const [transaction, , stakeMintKeypair] = await createStakeEntryAndStakeMint(\n    provider.connection,\n    provider.wallet,\n    {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    }\n  );\n  await executeTransaction(provider.connection, transaction, provider.wallet, {\n    signers: stakeMintKeypair ? [stakeMintKeypair] : [],\n  });\n\n  const stakeEntryData = await getStakeEntry(\n    provider.connection,\n    await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    )\n  );\n\n  expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n    originalMintId.toString()\n  );\n  expect(stakeEntryData.parsed.pool.toString()).toEqual(stakePoolId.toString());\n  expect(stakeEntryData.parsed.stakeMint?.toString()).toEqual(\n    stakeMintKeypair?.publicKey.toString()\n  );\n});\n\nit(\"Stake\", async () => {\n  const transaction = await stake(provider.connection, provider.wallet, {\n    stakePoolId: stakePoolId,\n    originalMintId: originalMintId,\n    userOriginalMintTokenAccountId: originalMintTokenAccountId,\n    receiptType: ReceiptType.Receipt,\n  });\n  await executeTransaction(provider.connection, transaction, provider.wallet);\n\n  const stakeEntryData = await getStakeEntry(\n    provider.connection,\n    await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    )\n  );\n\n  const userOriginalMintTokenAccountId = await findAta(\n    originalMintId,\n    provider.wallet.publicKey,\n    true\n  );\n\n  const stakeEntryOriginalMintTokenAccountId = await findAta(\n    originalMintId,\n    stakeEntryData.pubkey,\n    true\n  );\n\n  expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n  expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n    provider.wallet.publicKey.toString()\n  );\n\n  const checkUserOriginalTokenAccount = await getAccount(\n    provider.connection,\n    userOriginalMintTokenAccountId\n  );\n  expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(0);\n\n  const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n    provider.connection,\n    stakeEntryOriginalMintTokenAccountId\n  );\n  expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(1);\n\n  if (!stakeEntryData.parsed.stakeMint) {\n    throw new Error(\"stakeMintKeypair is undefined\");\n  }\n\n  const stakeEntryId = await findStakeEntryIdFromMint(\n    provider.connection,\n    provider.wallet.publicKey,\n    stakePoolId,\n    originalMintId\n  );\n\n  const userReceiptMintTokenAccountId = await findAta(\n    stakeEntryData.parsed.stakeMint,\n    provider.wallet.publicKey,\n    true\n  );\n\n  const stakeEntryReceiptMintTokenAccountId = await findAta(\n    stakeEntryData.parsed.stakeMint,\n    stakeEntryId,\n    true\n  );\n\n  const checkUserReceiptMintTokenAccount = await getAccount(\n    provider.connection,\n    userReceiptMintTokenAccountId\n  );\n  expect(Number(checkUserReceiptMintTokenAccount.amount)).toEqual(1);\n\n  const checkStakeEntryReceiptMintTokenAccount = await getAccount(\n    provider.connection,\n    stakeEntryReceiptMintTokenAccountId\n  );\n  expect(Number(checkStakeEntryReceiptMintTokenAccount.amount)).toEqual(0);\n});\n\nit(\"Unstake\", async () => {\n  const transaction = await unstake(provider.connection, provider.wallet, {\n    distributorId: new BN(0),\n    stakePoolId: stakePoolId,\n    originalMintId: originalMintId,\n  });\n  await executeTransaction(provider.connection, transaction, provider.wallet);\n\n  const stakeEntryData = await getStakeEntry(\n    provider.connection,\n    await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    )\n  );\n\n  const userOriginalMintTokenAccountId = await findAta(\n    originalMintId,\n    provider.wallet.publicKey,\n    true\n  );\n\n  const stakeEntryOriginalMintTokenAccountId = await findAta(\n    originalMintId,\n    stakeEntryData.pubkey,\n    true\n  );\n\n  expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n  expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n    PublicKey.default.toString()\n  );\n\n  const checkUserOriginalTokenAccount = await getAccount(\n    provider.connection,\n    userOriginalMintTokenAccountId\n  );\n  expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n\n  const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n    provider.connection,\n    stakeEntryOriginalMintTokenAccountId\n  );\n  expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(0);\n});\n"]}