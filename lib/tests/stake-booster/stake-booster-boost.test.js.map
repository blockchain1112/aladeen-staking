{"version":3,"file":"stake-booster-boost.test.js","sourceRoot":"","sources":["../../../tests/stake-booster/stake-booster-boost.test.ts"],"names":[],"mappings":";;AAAA,6CAA2C;AAC3C,gFAA0E;AAC1E,iDAA8E;AAC9E,6CAAkE;AAClE,iCAA2B;AAE3B,mCAA4D;AAC5D,4DAIsC;AACtC,oEAAsE;AACtE,0EAIkD;AAClD,8DAA8E;AAC9E,oCAKkB;AAElB,4CAA2C;AAE3C,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,QAA0B,CAAC;IAC/B,IAAI,WAAsB,CAAC;IAC3B,IAAI,0BAAqC,CAAC;IAC1C,IAAI,cAAyB,CAAC;IAC9B,MAAM,YAAY,GAAG,iBAAO,CAAC,QAAQ,EAAE,CAAC;IAExC,IAAI,uBAAkC,CAAC;IACvC,IAAI,aAAwB,CAAC;IAC7B,MAAM,4BAA4B,GAAG,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,aAAa,GAAG,IAAI,UAAE,CAAC,EAAE,CAAC,CAAC;IACjC,MAAM,gBAAgB,GAAG,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC;IACnC,MAAM,cAAc,GAAG,IAAI,UAAE,CAAC,GAAG,CAAC,CAAC;IACnC,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,MAAM,SAAS,GAAG,CAAC,CAAC;IAEpB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,QAAQ,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;QAC/B,MAAM,WAAW,GAAG,iBAAO,CAAC,QAAQ,EAAE,CAAC;QACvC,cAAc,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,0BAA0B,GAAG,IAAA,yCAA6B,EACxD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,CAC1B,CAAC;QAEF,iBAAiB;QACjB,MAAM,WAAW,GAAG,MAAM,IAAA,6BAAqB,EAC7C,QAAQ,CAAC,UAAU,EACnB,WAAW,CAAC,SAAS,EACrB,QAAQ,CAAC,MAAM,CAAC,SAAS,CAC1B,CAAC;QACF,MAAM,IAAA,0BAAkB,EACtB,QAAQ,CAAC,UAAU,EACnB,WAAW,EACX,QAAQ,CAAC,MAAM,EACf,EAAE,OAAO,EAAE,CAAC,WAAW,CAAC,EAAE,CAC3B,CAAC;QAEF,CAAC,uBAAuB,EAAE,aAAa,CAAC,GAAG,MAAM,IAAA,kBAAU,EACzD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,EAAE,MAAM,EAAE,cAAc,CAAC,QAAQ,EAAE,EAAE,CACtC,CAAC;QAEF,eAAe;QACf,MAAM,wBAAwB,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,cAAc,CACvE,yCAA6B,CAC9B,CAAC;QACF,IAAI,CAAC,wBAAwB,EAAE;YAC7B,yBAAyB;YACzB,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;YACtC,MAAM,IAAA,sBAAQ,EACZ,WAAW,EACX,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,8CAAkC,EAClC,YAAY,CAAC,SAAS,EACtB,SAAS,EACT,SAAS,EACT,KAAK,CACN,CAAC;YACF,MAAM,IAAA,0BAAkB,EACtB,QAAQ,CAAC,UAAU,EACnB,WAAW,EACX,QAAQ,CAAC,MAAM,CAChB,CAAC;SACH;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,IAAI,WAAwB,CAAC;QAC7B,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EAChD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,EAAE,CACH,CAAC;QAEF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC9B,MAAM,WAAW,GAAG,MAAM,IAAA,kCAAoB,EAC5C,IAAI,qBAAW,EAAE,EACjB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,aAAa,EAAE,4BAA4B;YAC3C,WAAW,EAAE,aAAa;YAC1B,YAAY,EAAE,aAAa;YAC3B,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI;SACpC,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,WAAW,GAAG,MAAM,IAAA,WAAK,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;YAC9B,8BAA8B,EAAE,0BAA0B;YAC1D,WAAW,EAAE,uBAAW,CAAC,QAAQ;SAClC,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;QAEF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACrC,CAAC;QAEF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;;QACtB,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;QAClB,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,iBAAiB,GAAG,MAAM,IAAA,wBAAa,EAC3C,QAAQ,CAAC,UAAU,EACnB,YAAY,CACb,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;QACtC,MAAM,IAAA,yCAA2B,EAC/B,WAAW,EACX,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,YAAY,EAAE,YAAY;YAC1B,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS;SACtC,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,YAAY,CACb,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,CAAC,MAAA,cAAc,CAAC,MAAM,CAAC,aAAa,0CAAE,QAAQ,EAAE,CAAC,CAAC,eAAe,CACrE,MAAA,MAAA,iBAAiB,CAAC,MAAM,CAAC,aAAa,0CAAE,QAAQ,EAAE,mCAAI,CAAC,CACxD,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACrC,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CACxE,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CACtD,CAAC;QAEF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;QAClB,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,iBAAiB,GAAG,MAAM,IAAA,wBAAa,EAC3C,QAAQ,CAAC,UAAU,EACnB,YAAY,CACb,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,IAAA,iCAAmB,EAC3C,IAAI,qBAAW,EAAE,EACjB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,cAAc,EAAE,cAAc;YAC9B,iBAAiB,EAAE,uBAAuB;YAC1C,cAAc,EAAE,gBAAgB;SACjC,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACrC,CAAC;QACF,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAC9D,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAC9C,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,iBAAiB,CAAC,MAAM,CAAC,iBAAiB;aACvC,GAAG,CAAC,gBAAgB,CAAC;aACrB,QAAQ,EAAE,CACd,CAAC;QACF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE7D,MAAM,4BAA4B,GAAG,MAAM,IAAA,sBAAU,EACnD,QAAQ,CAAC,UAAU,EACnB,uBAAuB,CACxB,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CACzD,cAAc,CAAC,GAAG,CAChB,gBAAgB,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CACtE,CAAC,QAAQ,EAAE,CACb,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;QAClB,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,iBAAiB,GAAG,MAAM,IAAA,wBAAa,EAC3C,QAAQ,CAAC,UAAU,EACnB,YAAY,CACb,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,IAAA,aAAO,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACtE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SAC/B,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,mBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAC7B,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CACxE,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CACtD,CAAC;QACF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,IAAA,iCAAmB,EAC3C,IAAI,qBAAW,EAAE,EACjB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;YAC9B,YAAY,EAAE,YAAY;YAC1B,iBAAiB,EAAE,uBAAuB;YAC1C,cAAc,EAAE,gBAAgB;SACjC,CACF,CAAC;QACF,MAAM,MAAM,CACV,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,MAAM,EAAE,IAAI;SACb,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,IAAA,iCAAmB,EAC3C,IAAI,qBAAW,EAAE,EACjB,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,cAAc,EAAE,cAAc;YAC9B,iBAAiB,EAAE,uBAAuB;YAC1C,cAAc,EAAE,gBAAgB,CAAC,GAAG,CAAC,IAAI,UAAE,CAAC,EAAE,CAAC,CAAC;SACjD,CACF,CAAC;QACF,MAAM,MAAM,CACV,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,MAAM,EAAE,IAAI;SACb,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { withInit } from \"@cardinal/payment-manager/dist/cjs/transaction\";\nimport { getAccount, getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport { Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { createStakePool, stake, unstake } from \"../../src\";\nimport {\n  ReceiptType,\n  STAKE_BOOSTER_PAYMENT_MANAGER,\n  STAKE_BOOSTER_PAYMENT_MANAGER_NAME,\n} from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport {\n  withBoostStakeEntry,\n  withInitStakeBooster,\n  withUpdateTotalStakeSeconds,\n} from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMasterEditionTx,\n  createMint,\n  delay,\n  executeTransaction,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Stake booster boost\", () => {\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  const feeCollector = Keypair.generate();\n\n  let paymentMintTokenAccount: PublicKey;\n  let paymentMintId: PublicKey;\n  const STAKE_BOOSTER_PAYMENT_AMOUNT = new BN(2);\n  const BOOST_SECONDS = new BN(10);\n  const SECONDS_TO_BOOST = new BN(3);\n  const PAYMENT_SUPPLY = new BN(100);\n  const MAKER_FEE = 50;\n  const TAKER_FEE = 0;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    const mintKeypair = Keypair.generate();\n    originalMintId = mintKeypair.publicKey;\n    originalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey\n    );\n\n    // master edition\n    const transaction = await createMasterEditionTx(\n      provider.connection,\n      mintKeypair.publicKey,\n      provider.wallet.publicKey\n    );\n    await executeTransaction(\n      provider.connection,\n      transaction,\n      provider.wallet,\n      { signers: [mintKeypair] }\n    );\n\n    [paymentMintTokenAccount, paymentMintId] = await createMint(\n      provider.connection,\n      provider.wallet,\n      { amount: PAYMENT_SUPPLY.toNumber() }\n    );\n\n    // payment mint\n    const stakeBoostPaymentManager = await provider.connection.getAccountInfo(\n      STAKE_BOOSTER_PAYMENT_MANAGER\n    );\n    if (!stakeBoostPaymentManager) {\n      // create payment manager\n      const transaction = new Transaction();\n      await withInit(\n        transaction,\n        provider.connection,\n        provider.wallet,\n        STAKE_BOOSTER_PAYMENT_MANAGER_NAME,\n        feeCollector.publicKey,\n        MAKER_FEE,\n        TAKER_FEE,\n        false\n      );\n      await executeTransaction(\n        provider.connection,\n        transaction,\n        provider.wallet\n      );\n    }\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create booster\", async () => {\n    const transaction = await withInitStakeBooster(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        paymentAmount: STAKE_BOOSTER_PAYMENT_AMOUNT,\n        paymentMint: paymentMintId,\n        boostSeconds: BOOST_SECONDS,\n        startTimeSeconds: Date.now() / 1000,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Update\", async () => {\n    await delay(1000);\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const oldStakeEntryData = await getStakeEntry(\n      provider.connection,\n      stakeEntryId\n    );\n    const transaction = new Transaction();\n    await withUpdateTotalStakeSeconds(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakeEntryId: stakeEntryId,\n        lastStaker: provider.wallet.publicKey,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      stakeEntryId\n    );\n    expect(stakeEntryData.parsed.lastUpdatedAt).not.toEqual(null);\n    expect(oldStakeEntryData.parsed.lastUpdatedAt).not.toEqual(null);\n    expect(stakeEntryData.parsed.lastUpdatedAt?.toNumber()).toBeGreaterThan(\n      oldStakeEntryData.parsed.lastUpdatedAt?.toNumber() ?? 0\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(stakeEntryData.parsed.totalStakeSeconds.toNumber()).toBeGreaterThan(\n      oldStakeEntryData.parsed.totalStakeSeconds.toNumber()\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Boost\", async () => {\n    await delay(5000);\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const oldStakeEntryData = await getStakeEntry(\n      provider.connection,\n      stakeEntryId\n    );\n    const transaction = await withBoostStakeEntry(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n        originalMintId: originalMintId,\n        payerTokenAccount: paymentMintTokenAccount,\n        secondsToBoost: SECONDS_TO_BOOST,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(oldStakeEntryData.parsed.lastStakedAt.toNumber()).toEqual(\n      stakeEntryData.parsed.lastStakedAt.toNumber()\n    );\n    expect(stakeEntryData.parsed.totalStakeSeconds.toNumber()).toEqual(\n      oldStakeEntryData.parsed.totalStakeSeconds\n        .add(SECONDS_TO_BOOST)\n        .toNumber()\n    );\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n\n    const checkPaymentMintTokenAccount = await getAccount(\n      provider.connection,\n      paymentMintTokenAccount\n    );\n    expect(Number(checkPaymentMintTokenAccount.amount)).toEqual(\n      PAYMENT_SUPPLY.sub(\n        SECONDS_TO_BOOST.mul(STAKE_BOOSTER_PAYMENT_AMOUNT).div(BOOST_SECONDS)\n      ).toNumber()\n    );\n  });\n\n  it(\"Unstake\", async () => {\n    await delay(2000);\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const oldStakeEntryData = await getStakeEntry(\n      provider.connection,\n      stakeEntryId\n    );\n\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.totalStakeSeconds.toNumber()).toBeGreaterThan(\n      oldStakeEntryData.parsed.totalStakeSeconds.toNumber()\n    );\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n  });\n\n  it(\"Fail boost while unstaked\", async () => {\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const transaction = await withBoostStakeEntry(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n        stakeEntryId: stakeEntryId,\n        payerTokenAccount: paymentMintTokenAccount,\n        secondsToBoost: SECONDS_TO_BOOST,\n      }\n    );\n    await expect(\n      executeTransaction(provider.connection, transaction, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n\n  it(\"Fail boost too far\", async () => {\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const transaction = await withBoostStakeEntry(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n        originalMintId: originalMintId,\n        payerTokenAccount: paymentMintTokenAccount,\n        secondsToBoost: SECONDS_TO_BOOST.mul(new BN(10)),\n      }\n    );\n    await expect(\n      executeTransaction(provider.connection, transaction, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n});\n"]}