{"version":3,"file":"group-stake-claim-rewards.test.js","sourceRoot":"","sources":["../../../tests/stake-groups/group-stake-claim-rewards.test.ts"],"names":[],"mappings":";;AAAA,6CAA2C;AAC3C,kDAA+C;AAC/C,iDAA+C;AAC/C,6CAAyD;AACzD,iCAA2B;AAE3B,mCAUmB;AACnB,iFAG4D;AAC5D,uEAAuF;AACvF,4EAGuD;AACvD,kEAGkD;AAClD,kFAA6F;AAC7F,4DAA2D;AAC3D,oEAG+C;AAC/C,8DAA8E;AAC9E,oCAMkB;AAElB,4CAA2C;AAE3C,uDAAuD;AAEvD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,QAA0B,CAAC;IAC/B,IAAI,0BAAqC,CAAC;IAC1C,IAAI,cAAyB,CAAC;IAC9B,IAAI,2BAAsC,CAAC;IAC3C,IAAI,eAA0B,CAAC;IAC/B,IAAI,YAAuB,CAAC;IAC5B,IAAI,iBAA4B,CAAC;IACjC,IAAI,WAAsB,CAAC;IAC3B,IAAI,wBAAmC,CAAC;IACxC,IAAI,iBAA4B,CAAC;IAEjC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,QAAQ,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;QAE/B,gBAAgB;QAChB,MAAM,aAAa,GAAG,MAAM,IAAA,8BAAsB,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACxE,CAAC,0BAA0B,EAAE,cAAc,CAAC,GAAG,MAAM,IAAA,2BAAmB,EACtE,QAAQ,CAAC,UAAU,EACnB,IAAI,eAAM,CAAC,aAAa,CAAC,EACzB,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CACtC,CAAC;QAEF,kBAAkB;QAClB,CAAC,2BAA2B,EAAE,eAAe,CAAC,GAAG,MAAM,IAAA,2BAAmB,EACxE,QAAQ,CAAC,UAAU,EACnB,IAAI,eAAM,CAAC,aAAa,CAAC,EACzB,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CACtC,CAAC;QAEF,cAAc;QACd,CAAC,EAAE,YAAY,CAAC,GAAG,MAAM,IAAA,kBAAU,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC1E,CAAC,EAAE,iBAAiB,CAAC,GAAG,MAAM,IAAA,kBAAU,EACtC,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAChB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,IAAI,WAAwB,CAAC;QAC7B,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EAChD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,EAAE,CACH,CAAC;QAEF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;QAEtC,MAAM,IAAA,uCAAyB,EAC7B,WAAW,EACX,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;SAC3B,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,qBAAqB,GAAG,MAAM,IAAA,+BAAoB,EACtD,QAAQ,CAAC,UAAU,EACnB,mBAAmB,CACpB,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,YAAY,CAAC,QAAQ,EAAE,CACxB,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,YAAY,CAAC,QAAQ,EAAE,CACxB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,CAAC,WAAW,EAAE,mBAAmB,CAAC,GACtC,MAAM,IAAA,kCAA4B,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACvE,eAAe,EAAE,CAAC,WAAW,CAAC;YAC9B,YAAY,EAAE,iBAAiB;SAChC,CAAC,CAAC;QACL,wBAAwB,GAAG,mBAAmB,CAAC;QAC/C,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,qBAAqB,GAAG,MAAM,IAAA,oCAAyB,EAC3D,QAAQ,CAAC,UAAU,EACnB,mBAAmB,CACpB,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,iBAAiB,CAAC,QAAQ,EAAE,CAC7B,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,iBAAiB,CAAC,QAAQ,EAAE,CAC7B,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,IAAA,2BAAqB,EAC7C,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SAC/B,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,aAAa,GAAG,IAAA,uBAAiB,EAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QAE3E,MAAM,eAAe,GAAG,MAAM,IAAA,yBAAc,EAC1C,QAAQ,CAAC,UAAU,EACnB,aAAa,CACd,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACjE,mBAAmB,CAAC,QAAQ,EAAE,CAC/B,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAC1D,YAAY,CAAC,QAAQ,EAAE,CACxB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,IAAA,2BAAqB,EAC7C,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,eAAe;SAChC,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,aAAa,GAAG,IAAA,uBAAiB,EAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QAE3E,MAAM,eAAe,GAAG,MAAM,IAAA,yBAAc,EAC1C,QAAQ,CAAC,UAAU,EACnB,aAAa,CACd,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACjE,mBAAmB,CAAC,QAAQ,EAAE,CAC/B,CAAC;QAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAC1D,YAAY,CAAC,QAAQ,EAAE,CACxB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,WAAW,GAAG,MAAM,IAAA,WAAK,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;YAC9B,8BAA8B,EAAE,0BAA0B;YAC1D,WAAW,EAAE,uBAAW,CAAC,QAAQ;SAClC,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;QAEF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACrC,CAAC;QAEF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;QACtB,MAAM,WAAW,GAAG,MAAM,IAAA,WAAK,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,eAAe;YAC/B,8BAA8B,EAAE,2BAA2B;YAC3D,WAAW,EAAE,uBAAW,CAAC,QAAQ;SAClC,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CACF,CAAC;QAEF,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,eAAe,EACf,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACrC,CAAC;QAEF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QAEF,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAwB,EAClD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CAAC;QAEF,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,MAAM,IAAA,sBAAgB,EACxD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;SAC7C,CACF,CAAC;QACF,iBAAiB,GAAG,YAAY,CAAC;QACjC,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,mBAAmB,GAAG,MAAM,IAAA,6BAAkB,EAClD,QAAQ,CAAC,UAAU,EACnB,YAAY,CACb,CAAC;QAEF,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAElE,KAAK,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;YAC9C,MAAM,UAAU,GAAG,MAAM,IAAA,wBAAa,EAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACjD;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;QAClB,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAwB,EAClD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CAAC;QACF,MAAM,sBAAsB,GAAG,MAAM,IAAA,6BAAkB,EACrD,QAAQ,CAAC,UAAU,EACnB,iBAAiB,CAClB,CAAC;QACF,MAAM,kBAAkB,GAAG,IAAA,4BAAsB,EAC/C,wBAAwB,EACxB,iBAAiB,CAClB,CAAC;QAEF,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,IAAA,uBAAiB,EAC3C,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,wBAAwB;YACxB,YAAY,EAAE,iBAAiB;YAC/B,aAAa,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;SAC7C,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,sBAAsB,GAAG,MAAM,IAAA,6BAAkB,EACrD,QAAQ,CAAC,UAAU,EACnB,iBAAiB,CAClB,CAAC;QACF,MAAM,oBAAoB,GAAG,MAAM,IAAA,8BAAmB,EACpD,QAAQ,CAAC,UAAU,EACnB,kBAAkB,CACnB,CAAC;QAEF,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAChE,sBAAsB,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CACnD,CAAC;QACF,MAAM,CACJ,oBAAoB,CAAC,MAAM,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAC7D,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAErB,MAAM,iCAAiC,GAAG,MAAM,IAAA,gBAAO,EACrD,iBAAiB,EACjB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,2BAA2B,GAAG,MAAM,IAAA,sBAAU,EAClD,QAAQ,CAAC,UAAU,EACnB,iCAAiC,CAClC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,IAAA,oBAAc,EACxC,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,YAAY,EAAE,iBAAiB;SAChC,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,mBAAmB,GAAG,MAAM,IAAA,6BAAkB,EAClD,QAAQ,CAAC,UAAU,EACnB,iBAAiB,CAClB,CAAC;QAEF,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAwB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CAAC;QAEF,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAwB,EAClD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CAAC;QAEF,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EACzC,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,YAAY,EAAE,iBAAiB;YAC/B,wBAAwB;YACxB,aAAa,EAAE,CAAC,YAAY,EAAE,aAAa,CAAC;SAC7C,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,iCAAiC,GAAG,MAAM,IAAA,gBAAO,EACrD,iBAAiB,EACjB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,2BAA2B,GAAG,MAAM,IAAA,sBAAU,EAClD,QAAQ,CAAC,UAAU,EACnB,iCAAiC,CAClC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEtE,KAAK,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;YAC9C,MAAM,UAAU,GAAG,MAAM,IAAA,wBAAa,EAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YAChE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAClD;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,WAAW,GAAG,MAAM,IAAA,aAAO,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACtE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SAC/B,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,mBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAC7B,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEzE,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,cAAc,EACd,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE9D,MAAM,oCAAoC,GAAG,MAAM,IAAA,gBAAO,EACxD,cAAc,EACd,cAAc,CAAC,MAAM,EACrB,IAAI,CACL,CAAC;QAEF,MAAM,4BAA4B,GAAG,MAAM,IAAA,gBAAO,EAChD,YAAY,EACZ,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QAEF,MAAM,uCAAuC,GAAG,MAAM,IAAA,sBAAU,EAC9D,QAAQ,CAAC,UAAU,EACnB,oCAAoC,CACrC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,uCAAuC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE1E,MAAM,2BAA2B,GAAG,MAAM,IAAA,sBAAU,EAClD,QAAQ,CAAC,UAAU,EACnB,4BAA4B,CAC7B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,WAAW,GAAG,MAAM,IAAA,aAAO,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACtE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,eAAe;SAChC,CAAC,CAAC;QACH,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,cAAc,GAAG,MAAM,IAAA,wBAAa,EACxC,QAAQ,CAAC,UAAU,EACnB,MAAM,IAAA,gCAAwB,EAC5B,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,WAAW,EACX,eAAe,CAChB,CACF,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACzD,mBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAC7B,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEzE,MAAM,8BAA8B,GAAG,MAAM,IAAA,gBAAO,EAClD,eAAe,EACf,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QACF,MAAM,6BAA6B,GAAG,MAAM,IAAA,sBAAU,EACpD,QAAQ,CAAC,UAAU,EACnB,8BAA8B,CAC/B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,6BAA6B,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE9D,MAAM,oCAAoC,GAAG,MAAM,IAAA,gBAAO,EACxD,eAAe,EACf,cAAc,CAAC,MAAM,EACrB,IAAI,CACL,CAAC;QAEF,MAAM,4BAA4B,GAAG,MAAM,IAAA,gBAAO,EAChD,YAAY,EACZ,QAAQ,CAAC,MAAM,CAAC,SAAS,EACzB,IAAI,CACL,CAAC;QAEF,MAAM,uCAAuC,GAAG,MAAM,IAAA,sBAAU,EAC9D,QAAQ,CAAC,UAAU,EACnB,oCAAoC,CACrC,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,uCAAuC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE1E,MAAM,2BAA2B,GAAG,MAAM,IAAA,sBAAU,EAClD,QAAQ,CAAC,UAAU,EACnB,4BAA4B,CAC7B,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport { getAccount } from \"@solana/spl-token\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport {\n  claimGroupRewards,\n  closeGroupEntry,\n  createGroupEntry,\n  createGroupRewardDistributor,\n  createStakePool,\n  initializeRewardEntry,\n  initUngrouping,\n  stake,\n  unstake,\n} from \"../../src\";\nimport {\n  getGroupRewardDistributor,\n  getGroupRewardEntry,\n} from \"../../src/programs/groupRewardDistributor/accounts\";\nimport { findGroupRewardEntryId } from \"../../src/programs/groupRewardDistributor/pda\";\nimport {\n  getRewardDistributor,\n  getRewardEntry,\n} from \"../../src/programs/rewardDistributor/accounts\";\nimport {\n  findRewardDistributorId,\n  findRewardEntryId,\n} from \"../../src/programs/rewardDistributor/pda\";\nimport { withInitRewardDistributor } from \"../../src/programs/rewardDistributor/transaction\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport {\n  getGroupStakeEntry,\n  getStakeEntry,\n} from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMasterEdition,\n  createMint,\n  delay,\n  executeTransaction,\n  newAccountWithLamports,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\n// reward distributor with mint youre are not authority\n\ndescribe(\"Group stake and claim rewards\", () => {\n  let provider: CardinalProvider;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  let originalMint2TokenAccountId: PublicKey;\n  let originalMintId2: PublicKey;\n  let rewardMintId: PublicKey;\n  let groupRewardMintId: PublicKey;\n  let stakePoolId: PublicKey;\n  let groupRewardDistributorId: PublicKey;\n  let groupStakeEntryId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n\n    // original mint\n    const mintAuthority = await newAccountWithLamports(provider.connection);\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n\n    // original mint 2\n    [originalMint2TokenAccountId, originalMintId2] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n\n    // reward mint\n    [, rewardMintId] = await createMint(provider.connection, provider.wallet);\n    [, groupRewardMintId] = await createMint(\n      provider.connection,\n      provider.wallet\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const transaction = new Transaction();\n\n    await withInitRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n  });\n\n  it(\"Create Group Reward Distributor\", async () => {\n    const [transaction, rewardDistributorId] =\n      await createGroupRewardDistributor(provider.connection, provider.wallet, {\n        authorizedPools: [stakePoolId],\n        rewardMintId: groupRewardMintId,\n      });\n    groupRewardDistributorId = rewardDistributorId;\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorData = await getGroupRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      groupRewardMintId.toString()\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      groupRewardMintId.toString()\n    );\n  });\n\n  it(\"Create Reward Entry\", async () => {\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n\n    const transaction = await initializeRewardEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardEntryId = findRewardEntryId(rewardDistributorId, stakeEntryId);\n\n    const rewardEntryData = await getRewardEntry(\n      provider.connection,\n      rewardEntryId\n    );\n\n    expect(rewardEntryData.parsed.rewardDistributor.toString()).toEqual(\n      rewardDistributorId.toString()\n    );\n\n    expect(rewardEntryData.parsed.stakeEntry.toString()).toEqual(\n      stakeEntryId.toString()\n    );\n  });\n\n  it(\"Create Reward Entry 2\", async () => {\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId2\n    );\n\n    const transaction = await initializeRewardEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId2,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardEntryId = findRewardEntryId(rewardDistributorId, stakeEntryId);\n\n    const rewardEntryData = await getRewardEntry(\n      provider.connection,\n      rewardEntryId\n    );\n\n    expect(rewardEntryData.parsed.rewardDistributor.toString()).toEqual(\n      rewardDistributorId.toString()\n    );\n\n    expect(rewardEntryData.parsed.stakeEntry.toString()).toEqual(\n      stakeEntryId.toString()\n    );\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Stake2\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId2,\n      userOriginalMintTokenAccountId: originalMint2TokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId2\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId2,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Create Group Stake Entry\", async () => {\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n\n    const stakeEntryId2 = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId2\n    );\n\n    const [transaction, groupEntryId] = await createGroupEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        stakeEntryIds: [stakeEntryId, stakeEntryId2],\n      }\n    );\n    groupStakeEntryId = groupEntryId;\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const groupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupEntryId\n    );\n\n    expect(groupStakeEntryData.parsed.stakeEntries.length).toEqual(2);\n\n    for (const id of [stakeEntryId, stakeEntryId2]) {\n      const stakeEntry = await getStakeEntry(provider.connection, id);\n      expect(stakeEntry.parsed.grouped).toEqual(true);\n    }\n  });\n\n  it(\"Claim Group Rewards\", async () => {\n    await delay(2000);\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const stakeEntryId2 = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId2\n    );\n    const oldGroupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupStakeEntryId\n    );\n    const groupRewardEntryId = findGroupRewardEntryId(\n      groupRewardDistributorId,\n      groupStakeEntryId\n    );\n\n    const [transaction] = await claimGroupRewards(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        groupRewardDistributorId,\n        groupEntryId: groupStakeEntryId,\n        stakeEntryIds: [stakeEntryId, stakeEntryId2],\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const newGroupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupStakeEntryId\n    );\n    const groupRewardEntryData = await getGroupRewardEntry(\n      provider.connection,\n      groupRewardEntryId\n    );\n\n    expect(newGroupStakeEntryData.parsed.changedAt.toNumber()).toEqual(\n      oldGroupStakeEntryData.parsed.changedAt.toNumber()\n    );\n    expect(\n      groupRewardEntryData.parsed.rewardSecondsReceived.toNumber()\n    ).toBeGreaterThan(1);\n\n    const userGroupRewardMintTokenAccountId = await findAta(\n      groupRewardMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserRewardTokenAccount = await getAccount(\n      provider.connection,\n      userGroupRewardMintTokenAccountId\n    );\n    expect(Number(checkUserRewardTokenAccount.amount)).toBeGreaterThan(1);\n  });\n\n  it(\"Start cooldown period\", async () => {\n    const [transaction] = await initUngrouping(\n      provider.connection,\n      provider.wallet,\n      {\n        groupEntryId: groupStakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const groupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupStakeEntryId\n    );\n\n    expect(groupStakeEntryData.parsed.groupCooldownStartSeconds).not.toBeNull();\n  });\n\n  it(\"Close group\", async () => {\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n\n    const stakeEntryId2 = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId2\n    );\n\n    const [transaction] = await closeGroupEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        groupEntryId: groupStakeEntryId,\n        groupRewardDistributorId,\n        stakeEntryIds: [stakeEntryId, stakeEntryId2],\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const userGroupRewardMintTokenAccountId = await findAta(\n      groupRewardMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserRewardTokenAccount = await getAccount(\n      provider.connection,\n      userGroupRewardMintTokenAccountId\n    );\n    expect(Number(checkUserRewardTokenAccount.amount)).toBeGreaterThan(1);\n\n    for (const id of [stakeEntryId, stakeEntryId2]) {\n      const stakeEntry = await getStakeEntry(provider.connection, id);\n      expect(stakeEntry.parsed.grouped).toEqual(false);\n    }\n  });\n\n  it(\"Unstake\", async () => {\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    const userRewardMintTokenAccountId = await findAta(\n      rewardMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(0);\n\n    const checkUserRewardTokenAccount = await getAccount(\n      provider.connection,\n      userRewardMintTokenAccountId\n    );\n    expect(Number(checkUserRewardTokenAccount.amount)).toBeGreaterThan(1);\n  });\n\n  it(\"Unstake2\", async () => {\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId2,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId2\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId2,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId2,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    const userRewardMintTokenAccountId = await findAta(\n      rewardMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(0);\n\n    const checkUserRewardTokenAccount = await getAccount(\n      provider.connection,\n      userRewardMintTokenAccountId\n    );\n    expect(Number(checkUserRewardTokenAccount.amount)).toBeGreaterThan(1);\n  });\n});\n"]}