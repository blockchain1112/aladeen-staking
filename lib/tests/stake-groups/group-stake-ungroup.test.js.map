{"version":3,"file":"group-stake-ungroup.test.js","sourceRoot":"","sources":["../../../tests/stake-groups/group-stake-ungroup.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Wallet } from \"@project-serum/anchor\";\nimport { getAccount, getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\n\nimport {\n  createGroupEntry,\n  createStakePool,\n  initUngrouping,\n  stake,\n} from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport {\n  getGroupStakeEntry,\n  getStakeEntry,\n} from \"../../src/programs/stakePool/accounts\";\nimport { withRemoveFromGroupEntry } from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMasterEdition,\n  executeTransaction,\n  newAccountWithLamports,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Group stake ungroup\", () => {\n  let provider: CardinalProvider;\n  let mintId1: PublicKey;\n  let mintId2: PublicKey;\n  let mintId3: PublicKey;\n  let mintId4: PublicKey;\n  let mintId5: PublicKey;\n  let mintId6: PublicKey;\n\n  let stakePoolId: PublicKey;\n  let groupStakeEntryId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    const mintAuthority = await newAccountWithLamports(provider.connection);\n    // mint1\n    [, mintId1] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n    // mint2\n    [, mintId2] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n    // mint3\n    [, mintId3] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n    // mint4\n    [, mintId4] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n    // mint5\n    [, mintId5] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n    // mint6\n    [, mintId6] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Stake all\", async () => {\n    const mintIds = [mintId1, mintId2, mintId3, mintId4, mintId5, mintId6];\n    for (let i = 0; i < mintIds.length; i++) {\n      const mintId = mintIds[i]!;\n      const userTokenAccountId = getAssociatedTokenAddressSync(\n        mintId,\n        provider.wallet.publicKey,\n        true\n      );\n      const transaction = await stake(provider.connection, provider.wallet, {\n        stakePoolId: stakePoolId,\n        originalMintId: mintId,\n        userOriginalMintTokenAccountId: userTokenAccountId,\n        receiptType: ReceiptType.Original,\n      });\n      await executeTransaction(\n        provider.connection,\n        transaction,\n        provider.wallet\n      );\n\n      const stakeEntryData = await getStakeEntry(\n        provider.connection,\n        await findStakeEntryIdFromMint(\n          provider.connection,\n          provider.wallet.publicKey,\n          stakePoolId,\n          mintId\n        )\n      );\n      expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n      expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n        provider.wallet.publicKey.toString()\n      );\n\n      const userTokenAccount = await getAccount(\n        provider.connection,\n        userTokenAccountId\n      );\n      expect(Number(userTokenAccount.amount)).toEqual(1);\n      expect(userTokenAccount.isFrozen).toEqual(true);\n    }\n  });\n\n  it(\"Create Group Stake Entry\", async () => {\n    const mindIds = [mintId1, mintId2, mintId3, mintId4, mintId5, mintId6];\n    const stakeEntryIds = await Promise.all(\n      mindIds.map((mintId) =>\n        findStakeEntryIdFromMint(\n          provider.connection,\n          provider.wallet.publicKey,\n          stakePoolId,\n          mintId\n        )\n      )\n    );\n    const [transaction, groupEntryId] = await createGroupEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        stakeEntryIds,\n      }\n    );\n    groupStakeEntryId = groupEntryId;\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const groupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupEntryId\n    );\n\n    expect(groupStakeEntryData.parsed.stakeEntries.length).toEqual(\n      stakeEntryIds.length\n    );\n\n    for (const id of stakeEntryIds) {\n      const stakeEntry = await getStakeEntry(provider.connection, id);\n      expect(stakeEntry.parsed.grouped).toEqual(true);\n    }\n  });\n\n  it(\"Start cooldown period\", async () => {\n    const [transaction] = await initUngrouping(\n      provider.connection,\n      provider.wallet,\n      {\n        groupEntryId: groupStakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const groupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupStakeEntryId\n    );\n\n    expect(groupStakeEntryData.parsed.groupCooldownStartSeconds).not.toBeNull();\n  });\n\n  it(\"Remove 1 from group\", async () => {\n    const mintId = mintId1;\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      mintId\n    );\n    const [transaction] = await withRemoveFromGroupEntry(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        groupEntryId: groupStakeEntryId,\n        stakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const groupStakeEntryData = await getGroupStakeEntry(\n      provider.connection,\n      groupStakeEntryId\n    );\n\n    expect(groupStakeEntryData.parsed.stakeEntries.length).toEqual(5);\n    const stakeEntry = await getStakeEntry(provider.connection, stakeEntryId);\n    expect(stakeEntry.parsed.grouped).toEqual(false);\n  });\n\n  it(\"Remove remaining from group\", async () => {\n    const mintIds = [mintId2, mintId3, mintId4, mintId5];\n    for (let i = 0; i < mintIds.length; i++) {\n      const mintId = mintIds[i]!;\n      const stakeEntryId = await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        mintId\n      );\n      const [transaction] = await withRemoveFromGroupEntry(\n        new Transaction(),\n        provider.connection,\n        provider.wallet,\n        {\n          groupEntryId: groupStakeEntryId,\n          stakeEntryId,\n        }\n      );\n      await executeTransaction(\n        provider.connection,\n        transaction,\n        provider.wallet\n      );\n\n      const groupStakeEntryData = await getGroupStakeEntry(\n        provider.connection,\n        groupStakeEntryId\n      );\n\n      expect(groupStakeEntryData.parsed.stakeEntries.length).toEqual(\n        mintIds.length - i\n      );\n      const stakeEntry = await getStakeEntry(provider.connection, stakeEntryId);\n      expect(stakeEntry.parsed.grouped).toEqual(false);\n    }\n  });\n\n  it(\"Remove last from group\", async () => {\n    const mintId = mintId6;\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      mintId\n    );\n    const [transaction] = await withRemoveFromGroupEntry(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        groupEntryId: groupStakeEntryId,\n        stakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    await expect(async () => {\n      await getGroupStakeEntry(provider.connection, groupStakeEntryId);\n    }).rejects.toThrow(\n      new Error(`Account does not exist ${groupStakeEntryId.toBase58()}`)\n    );\n\n    const stakeEntry = await getStakeEntry(provider.connection, stakeEntryId);\n    expect(stakeEntry.parsed.grouped).toEqual(false);\n  });\n});\n"]}