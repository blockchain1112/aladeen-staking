{"version":3,"file":"stake-but-pool-has-ended.test.js","sourceRoot":"","sources":["../../../tests/stake/stake-but-pool-has-ended.test.ts"],"names":[],"mappings":";;AACA,iCAA2B;AAE3B,mCAAmD;AACnD,oCAAmE;AAEnE,4CAA2C;AAE3C,IAAI,QAA0B,CAAC;AAC/B,IAAI,0BAAqC,CAAC;AAC1C,IAAI,cAAyB,CAAC;AAC9B,IAAI,WAAsB,CAAC;AAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC;AAEtC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,QAAQ,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;QAC/B,CAAC,0BAA0B,EAAE,cAAc,CAAC,GAAG,MAAM,IAAA,2BAAmB,EACtE,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAChB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,IAAI,EAAe,CAAC;QACpB,CAAC,EAAE,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EACvC,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,EAAE,OAAO,EAAE,IAAI,UAAE,CAAC,OAAO,CAAC,EAAE,CAC7B,CAAC;QAEF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;QACrB,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAC9C,MAAM,EAAE,GAAG,MAAM,IAAA,WAAK,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC3D,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;YAC9B,8BAA8B,EAAE,0BAA0B;SAC3D,CAAC,CAAC;QACH,MAAM,MAAM,CACV,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,EAAE,QAAQ,CAAC,MAAM,EAAE;YAC3D,MAAM,EAAE,IAAI;SACb,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { createStakePool, stake } from \"../../src\";\nimport { createMasterEdition, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\nlet provider: CardinalProvider;\nlet originalMintTokenAccountId: PublicKey;\nlet originalMintId: PublicKey;\nlet stakePoolId: PublicKey;\nconst endDate = Date.now() / 1000 + 2;\n\ndescribe(\"Stake pool ended\", () => {\n  beforeAll(async () => {\n    provider = await getProvider();\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let tx: Transaction;\n    [tx, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      { endDate: new BN(endDate) }\n    );\n\n    await executeTransaction(provider.connection, tx, provider.wallet);\n  });\n\n  it(\"Stake\", async () => {\n    await new Promise((r) => setTimeout(r, 3000));\n    const tx = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n    });\n    await expect(\n      executeTransaction(provider.connection, tx, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n});\n"]}