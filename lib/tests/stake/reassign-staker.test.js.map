{"version":3,"file":"reassign-staker.test.js","sourceRoot":"","sources":["../../../tests/stake/reassign-staker.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport { getAccount, getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport { Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { createStakeEntry, createStakePool, unstake } from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryId } from \"../../src/programs/stakePool/pda\";\nimport {\n  withClaimReceiptMint,\n  withReassignStakeEntry,\n  withStake,\n} from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEditionTx, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider, newAccountWithLamports } from \"../workspace\";\n\nlet provider: CardinalProvider;\nlet originalMintTokenAccountId: PublicKey;\nlet originalMintId: PublicKey;\nlet stakePoolId: PublicKey;\nlet newStaker: Wallet;\n\ndescribe(\"Reassign stake entry\", () => {\n  beforeAll(async () => {\n    provider = await getProvider();\n\n    const mintKeypair = Keypair.generate();\n    originalMintId = mintKeypair.publicKey;\n    originalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey\n    );\n\n    newStaker = new Wallet(await newAccountWithLamports(provider.connection));\n    await executeTransaction(\n      provider.connection,\n      await createMasterEditionTx(\n        provider.connection,\n        mintKeypair.publicKey,\n        provider.wallet.publicKey\n      ),\n      provider.wallet,\n      { signers: [mintKeypair] }\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let tx: Transaction;\n    [tx, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n    await executeTransaction(provider.connection, tx, provider.wallet);\n  });\n\n  it(\"Stake\", async () => {\n    let transaction = new Transaction();\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const checkStakeEntryData = await tryGetAccount(() =>\n      getStakeEntry(provider.connection, stakeEntryId)\n    );\n    if (!checkStakeEntryData) {\n      [transaction] = await createStakeEntry(\n        provider.connection,\n        provider.wallet,\n        {\n          stakePoolId: stakePoolId,\n          originalMintId: originalMintId,\n        }\n      );\n    }\n\n    await withStake(transaction, provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      amount: new BN(1),\n    });\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(0);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n  });\n\n  it(\"Reassign stake entry\", async () => {\n    const transaction = new Transaction();\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n    await withReassignStakeEntry(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n        target: newStaker.publicKey,\n      }\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      stakeEntryId\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      newStaker.publicKey.toString()\n    );\n  });\n\n  it(\"Claim receipt mint\", async () => {\n    const transaction = new Transaction();\n\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n\n    await withClaimReceiptMint(transaction, provider.connection, newStaker, {\n      stakePoolId: stakePoolId,\n      stakeEntryId: stakeEntryId,\n      originalMintId: originalMintId,\n      receiptMintId: originalMintId,\n      receiptType: ReceiptType.Original,\n    });\n\n    await executeTransaction(provider.connection, transaction, newStaker);\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      newStaker.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Unstake\", async () => {\n    let transaction = new Transaction();\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      originalMintId,\n      newStaker.publicKey,\n      provider.wallet.publicKey,\n      true\n    );\n    transaction = await unstake(provider.connection, newStaker, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n\n    await executeTransaction(provider.connection, transaction, newStaker);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      newStaker.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n  });\n});\n"]}