{"version":3,"file":"stake-receipt-none.test.js","sourceRoot":"","sources":["../../../tests/stake/stake-receipt-none.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { beforeAll, expect } from \"@jest/globals\";\nimport { getAccount, getAssociatedTokenAddressSync } from \"@solana/spl-token\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { createStakeEntry, stake, unstake } from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { withInitStakePool } from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEdition, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\nlet provider: CardinalProvider;\nlet originalMintTokenAccountId: PublicKey;\nlet originalMintId: PublicKey;\nlet stakePoolId: PublicKey;\n\ndescribe(\"Stake receipt none\", () => {\n  beforeAll(async () => {\n    provider = await getProvider();\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    const tx = new Transaction();\n    [, stakePoolId] = await withInitStakePool(\n      tx,\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n    await executeTransaction(provider.connection, tx, provider.wallet);\n  });\n\n  it(\"Init stake entry\", async () => {\n    await executeTransaction(\n      provider.connection,\n      (\n        await createStakeEntry(provider.connection, provider.wallet, {\n          stakePoolId: stakePoolId,\n          originalMintId: originalMintId,\n        })\n      )[0],\n      provider.wallet\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n      originalMintId.toString()\n    );\n    expect(stakeEntryData.parsed.pool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n  });\n\n  it(\"Stake\", async () => {\n    await executeTransaction(\n      provider.connection,\n      await stake(provider.connection, provider.wallet, {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n        userOriginalMintTokenAccountId: originalMintTokenAccountId,\n        receiptType: ReceiptType.None,\n      }),\n      provider.wallet\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const stakeEntryOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(0);\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(1);\n  });\n\n  it(\"Unstake\", async () => {\n    await executeTransaction(\n      provider.connection,\n      await unstake(provider.connection, provider.wallet, {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }),\n      provider.wallet\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const stakeEntryOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(0);\n  });\n});\n"]}