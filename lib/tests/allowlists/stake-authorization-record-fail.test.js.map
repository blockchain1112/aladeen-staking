{"version":3,"file":"stake-authorization-record-fail.test.js","sourceRoot":"","sources":["../../../tests/allowlists/stake-authorization-record-fail.test.ts"],"names":[],"mappings":";;AAEA,mCAA8D;AAC9D,oEAAqE;AACrE,oCAAmE;AAEnE,4CAA2C;AAE3C,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,QAA0B,CAAC;IAE/B,MAAM,WAAW,GAAG,SAAS,CAAC;IAC9B,IAAI,cAAyB,CAAC;IAC9B,IAAI,WAAsB,CAAC;IAE3B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,QAAQ,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;QAC/B,gBAAgB;QAChB,CAAC,EAAE,cAAc,CAAC,GAAG,MAAM,IAAA,2BAAmB,EAC5C,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,CAChB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,IAAI,WAAwB,CAAC;QAC7B,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EAChD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,qBAAqB,EAAE,IAAI;SAC5B,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,aAAa,GAAG,MAAM,IAAA,uBAAY,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC3E,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,UAAU,EAAE,CAAC;QAChE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,IAAI,WAAwB,CAAC;QAE7B,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,sBAAgB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,WAAW,EAAE,WAAW;YACxB,cAAc,EAAE,cAAc;SAC/B,CACF,CAAC;QACF,MAAM,MAAM,CACV,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,EAAE;YACpE,MAAM,EAAE,IAAI;SACb,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { createStakeEntry, createStakePool } from \"../../src\";\nimport { getStakePool } from \"../../src/programs/stakePool/accounts\";\nimport { createMasterEdition, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Requires authorization fail\", () => {\n  let provider: CardinalProvider;\n\n  const overlayText = \"staking\";\n  let originalMintId: PublicKey;\n  let stakePoolId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    [, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {\n        overlayText: overlayText,\n        requiresAuthorization: true,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakePoolData = await getStakePool(provider.connection, stakePoolId);\n    expect(stakePoolData.parsed.requiresAuthorization).toBeTruthy();\n    expect(stakePoolData.parsed.overlayText).toEqual(overlayText);\n  });\n\n  it(\"Init stake entry for pool\", async () => {\n    let transaction: Transaction;\n\n    [transaction, stakePoolId] = await createStakeEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await expect(\n      executeTransaction(provider.connection, transaction, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n});\n"]}