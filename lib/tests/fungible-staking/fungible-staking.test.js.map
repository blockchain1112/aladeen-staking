{"version":3,"file":"fungible-staking.test.js","sourceRoot":"","sources":["../../../tests/fungible-staking/fungible-staking.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { BN, Wallet } from \"@project-serum/anchor\";\nimport { getAccount, getMint } from \"@solana/spl-token\";\nimport type { Keypair } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { assert } from \"console\";\n\nimport {\n  createStakeEntryAndStakeMint,\n  createStakePool,\n  initializeRewardEntry,\n  rewardDistributor,\n  stake,\n  unstake,\n} from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMint,\n  executeTransaction,\n  newAccountWithLamports,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Create stake pool\", () => {\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  let rewardMintId: PublicKey;\n\n  const maxSupply = 100;\n  const stakingAmount = 10;\n  let stakeMintKeypair: Keypair | undefined;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    const mintAuthority = await newAccountWithLamports(provider.connection);\n    [originalMintTokenAccountId, originalMintId] = await createMint(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey, amount: stakingAmount }\n    );\n\n    // reward mint\n    [, rewardMintId] = await createMint(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey, amount: maxSupply }\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const transaction = new Transaction();\n    await rewardDistributor.transaction.withInitRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n  });\n\n  it(\"Init Reward Entry\", async () => {\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const transaction = await initializeRewardEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        originalMintId: originalMintId,\n        stakePoolId: stakePoolId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n  });\n\n  it(\"Init fungible stake entry and stake mint\", async () => {\n    let transaction: Transaction;\n\n    [transaction, , stakeMintKeypair] = await createStakeEntryAndStakeMint(\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await executeTransaction(\n      provider.connection,\n      transaction,\n      provider.wallet,\n      {\n        signers: stakeMintKeypair ? [stakeMintKeypair] : [],\n      }\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n      originalMintId.toString()\n    );\n    expect(stakeEntryData.parsed.pool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    if (stakeMintKeypair) {\n      expect(stakeEntryData.parsed.stakeMint?.toString()).toEqual(\n        stakeMintKeypair.publicKey.toString()\n      );\n\n      expect(\n        (await getMint(provider.connection, stakeMintKeypair.publicKey))\n          .isInitialized\n      ).toBeTruthy();\n    }\n  });\n\n  it(\"Stake half\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Receipt,\n      amount: new BN(stakingAmount / 2),\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    if (stakeMintKeypair) {\n      const userReceiptTokenAccountId = await findAta(\n        stakeMintKeypair.publicKey,\n        provider.wallet.publicKey,\n        true\n      );\n\n      expect(stakeEntryData.parsed.amount.toNumber()).toEqual(\n        stakingAmount / 2\n      );\n      expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n      expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n        provider.wallet.publicKey.toString()\n      );\n\n      const checkUserOriginalTokenAccount = await getAccount(\n        provider.connection,\n        userOriginalMintTokenAccountId\n      );\n      expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(\n        stakingAmount / 2\n      );\n\n      const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n        provider.connection,\n        stakeEntryOriginalMintTokenAccountId\n      );\n      expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(\n        stakingAmount / 2\n      );\n\n      const userReceiptTokenAccount = await getAccount(\n        provider.connection,\n        userReceiptTokenAccountId\n      );\n      expect(Number(userReceiptTokenAccount.amount)).toEqual(1);\n    }\n  });\n\n  it(\"Stake another half\", async () => {\n    try {\n      await stake(provider.connection, provider.wallet, {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n        userOriginalMintTokenAccountId: originalMintTokenAccountId,\n        receiptType: ReceiptType.Receipt,\n        amount: new BN(stakingAmount / 2),\n      });\n      assert(\n        false,\n        \"Staked ix should have failed because there are tokens already staked\"\n      );\n    } catch (e) {\n      assert(true);\n    }\n  });\n\n  it(\"Unstake\", async () => {\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(10);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n  });\n});\n"]}