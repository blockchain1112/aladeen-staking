{"version":3,"file":"fungible-staking-add-during-cooldown.test.js","sourceRoot":"","sources":["../../../tests/fungible-staking/fungible-staking-add-during-cooldown.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { BN, Wallet } from \"@project-serum/anchor\";\nimport { getAccount } from \"@solana/spl-token\";\nimport type { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { createStakePool, stake, unstake } from \"../../src\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMint,\n  executeTransaction,\n  newAccountWithLamports,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Create stake pool\", () => {\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n\n  const stakingAmount = 10;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    const mintAuthority = await newAccountWithLamports(provider.connection);\n    [originalMintTokenAccountId, originalMintId] = await createMint(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey, amount: stakingAmount }\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {\n        cooldownSeconds: 10,\n      }\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Stake half\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      amount: new BN(stakingAmount / 2),\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.amount.toNumber()).toEqual(stakingAmount / 2);\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(\n      stakingAmount / 2\n    );\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(\n      stakingAmount / 2\n    );\n  });\n\n  it(\"Unstake\", async () => {\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n    expect(\n      stakeEntryData.parsed.cooldownStartSeconds?.toNumber()\n    ).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.amount.toNumber()).toEqual(stakingAmount / 2);\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(\n      stakingAmount / 2\n    );\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(\n      stakingAmount / 2\n    );\n  });\n});\n"]}