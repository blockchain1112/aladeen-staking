{"version":3,"file":"double-or-reset.test.js","sourceRoot":"","sources":["../../../tests/double-or-reset/double-or-reset.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { getAccount } from \"@solana/spl-token\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\n\nimport { createStakePool, stake } from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { withDoubleOrResetTotalStakeSeconds } from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEdition, delay, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Create stake pool\", () => {\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {\n        doubleOrResetEnabled: true,\n      }\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Double or reset\", async () => {\n    await delay(2000);\n\n    const transaction = await withDoubleOrResetTotalStakeSeconds(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        stakeEntryId: await findStakeEntryIdFromMint(\n          provider.connection,\n          provider.wallet.publicKey,\n          stakePoolId,\n          originalMintId\n        ),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(stakeEntryData.parsed.lastUpdatedAt?.toNumber()).toBeGreaterThan(0);\n    if (\n      !(\n        stakeEntryData.parsed.totalStakeSeconds?.toNumber() === 0 ||\n        stakeEntryData.parsed.totalStakeSeconds?.toNumber() >= 4\n      )\n    ) {\n      throw `Invalid double or nothing value: ${stakeEntryData.parsed.totalStakeSeconds?.toNumber()}`;\n    }\n  });\n});\n"]}