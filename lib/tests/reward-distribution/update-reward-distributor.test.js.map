{"version":3,"file":"update-reward-distributor.test.js","sourceRoot":"","sources":["../../../tests/reward-distribution/update-reward-distributor.test.ts"],"names":[],"mappings":";;AACA,6CAA8C;AAC9C,iCAA2B;AAE3B,mCAAqE;AACrE,4EAA6E;AAC7E,4EAAqF;AACrF,kEAAmF;AACnF,kFAA+F;AAC/F,oCAA0D;AAE1D,4CAA2C;AAE3C,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;IACrD,MAAM,SAAS,GAAG,GAAG,CAAC;IACtB,IAAI,QAA0B,CAAC;IAC/B,IAAI,WAAsB,CAAC;IAC3B,IAAI,YAAuB,CAAC;IAE5B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,QAAQ,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;QAC/B,cAAc;QACd,CAAC,EAAE,YAAY,CAAC,GAAG,MAAM,IAAA,kBAAU,EAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,EAAE;YACxE,MAAM,EAAE,SAAS;SAClB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,IAAI,WAAwB,CAAC;QAC7B,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,IAAA,qBAAe,EAChD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf,EAAE,CACH,CAAC;QAEF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,CAAC,WAAW,CAAC,GAAG,MAAM,IAAA,6BAAuB,EACjD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,yCAAqB,CAAC,QAAQ;YACpC,SAAS,EAAE,IAAI,UAAE,CAAC,SAAS,CAAC;SAC7B,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,qBAAqB,GAAG,MAAM,IAAA,+BAAoB,EACtD,QAAQ,CAAC,UAAU,EACnB,mBAAmB,CACpB,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACvE,GAAG,CACJ,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACxE,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;QAEtC,MAAM,IAAA,yCAA2B,EAC/B,WAAW,EACX,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,MAAM,EACf;YACE,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;YACxB,WAAW,EAAE,WAAW;YACxB,iBAAiB,EAAE,IAAI,UAAE,CAAC,GAAG,CAAC;YAC9B,kBAAkB,EAAE,CAAC;SACtB,CACF,CAAC;QACF,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE5E,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EAAC,WAAW,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,qBAAqB,GAAG,MAAM,IAAA,+BAAoB,EACtD,QAAQ,CAAC,UAAU,EACnB,mBAAmB,CACpB,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACvE,KAAK,CACN,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CACxE,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { createRewardDistributor, createStakePool } from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport { withUpdateRewardDistributor } from \"../../src/programs/rewardDistributor/transaction\";\nimport { createMint, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Stake and claim rewards from treasury\", () => {\n  const maxSupply = 100;\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let rewardMintId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // reward mint\n    [, rewardMintId] = await createMint(provider.connection, provider.wallet, {\n      amount: maxSupply,\n    });\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const [transaction] = await createRewardDistributor(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.defaultMultiplier.toString()).toEqual(\n      \"1\"\n    );\n\n    expect(rewardDistributorData.parsed.multiplierDecimals.toString()).toEqual(\n      \"0\"\n    );\n  });\n\n  it(\"Update Reward Distributor\", async () => {\n    const transaction = new Transaction();\n\n    await withUpdateRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        defaultMultiplier: new BN(200),\n        multiplierDecimals: 2,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.defaultMultiplier.toString()).toEqual(\n      \"200\"\n    );\n\n    expect(rewardDistributorData.parsed.multiplierDecimals.toString()).toEqual(\n      \"2\"\n    );\n  });\n});\n"]}