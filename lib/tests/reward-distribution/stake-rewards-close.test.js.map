{"version":3,"file":"stake-rewards-close.test.js","sourceRoot":"","sources":["../../../tests/reward-distribution/stake-rewards-close.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta, tryGetAccount } from \"@cardinal/common\";\nimport { BN } from \"@project-serum/anchor\";\nimport { getAccount } from \"@solana/spl-token\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport {\n  createStakePool,\n  initializeRewardEntry,\n  stake,\n  unstake,\n} from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport {\n  getRewardDistributor,\n  getRewardEntry,\n} from \"../../src/programs/rewardDistributor/accounts\";\nimport {\n  findRewardDistributorId,\n  findRewardEntryId,\n} from \"../../src/programs/rewardDistributor/pda\";\nimport {\n  withCloseRewardDistributor,\n  withCloseRewardEntry,\n  withInitRewardDistributor,\n} from \"../../src/programs/rewardDistributor/transaction\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMasterEdition,\n  createMint,\n  delay,\n  executeTransaction,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Stake claim rewards and close\", () => {\n  const maxSupply = 100;\n\n  let provider: CardinalProvider;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  let rewardMintId: PublicKey;\n  let stakePoolId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n\n    // reward mint\n    [, rewardMintId] = await createMint(provider.connection, provider.wallet, {\n      amount: maxSupply,\n    });\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const transaction = new Transaction();\n\n    await withInitRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n  });\n\n  it(\"Create Reward Entry\", async () => {\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n\n    const transaction = await initializeRewardEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        originalMintId: originalMintId,\n        stakePoolId: stakePoolId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardEntryId = findRewardEntryId(rewardDistributorId, stakeEntryId);\n\n    const rewardEntryData = await getRewardEntry(\n      provider.connection,\n      rewardEntryId\n    );\n\n    expect(rewardEntryData.parsed.rewardDistributor.toString()).toEqual(\n      rewardDistributorId.toString()\n    );\n\n    expect(rewardEntryData.parsed.stakeEntry.toString()).toEqual(\n      stakeEntryId.toString()\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n      originalMintId.toString()\n    );\n    expect(stakeEntryData.parsed.pool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(stakeEntryData.parsed.stakeMint).toEqual(null);\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Unstake\", async () => {\n    await delay(2000);\n    const transaction = await unstake(provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(false);\n\n    const stakeEntryOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      stakeEntryData.pubkey,\n      true\n    );\n\n    const userRewardMintTokenAccountId = await findAta(\n      rewardMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    const checkStakeEntryOriginalMintTokenAccount = await getAccount(\n      provider.connection,\n      stakeEntryOriginalMintTokenAccountId\n    );\n    expect(Number(checkStakeEntryOriginalMintTokenAccount.amount)).toEqual(0);\n\n    const checkUserRewardTokenAccount = await getAccount(\n      provider.connection,\n      userRewardMintTokenAccountId\n    );\n    expect(Number(checkUserRewardTokenAccount.amount)).toBeGreaterThan(1);\n  });\n\n  it(\"Close reward entry\", async () => {\n    const transaction = new Transaction();\n\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    await withCloseRewardEntry(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardEntryId = findRewardEntryId(\n      rewardDistributorId,\n      originalMintId\n    );\n\n    const rewardEntryData = await tryGetAccount(() =>\n      getRewardEntry(provider.connection, rewardEntryId)\n    );\n\n    expect(rewardEntryData).toEqual(null);\n  });\n\n  it(\"Close reward distributor\", async () => {\n    await delay(2000);\n    const transaction = new Transaction();\n    await withCloseRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await tryGetAccount(() =>\n      getRewardDistributor(provider.connection, rewardDistributorId)\n    );\n\n    expect(rewardDistributorData).toEqual(null);\n  });\n});\n"]}