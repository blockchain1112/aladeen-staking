{"version":3,"file":"reclaim-funds.test.js","sourceRoot":"","sources":["../../../tests/reward-distribution/reclaim-funds.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { getAccount } from \"@solana/spl-token\";\nimport * as web3 from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { createRewardDistributor, createStakePool } from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport { withReclaimFunds } from \"../../src/programs/rewardDistributor/transaction\";\nimport { createMint, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Reclaim funds\", () => {\n  const maxSupply = 100;\n  let provider: CardinalProvider;\n  let stakePoolId: web3.PublicKey;\n  let rewardMintId: web3.PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    provider = await getProvider();\n    // reward mint\n    [, rewardMintId] = await createMint(provider.connection, provider.wallet, {\n      amount: maxSupply,\n    });\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: web3.Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const [transaction] = await createRewardDistributor(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.defaultMultiplier.toString()).toEqual(\n      \"1\"\n    );\n\n    expect(rewardDistributorData.parsed.multiplierDecimals.toString()).toEqual(\n      \"0\"\n    );\n  });\n\n  it(\"Reclaim funds\", async () => {\n    const transaction = new web3.Transaction();\n\n    await withReclaimFunds(transaction, provider.connection, provider.wallet, {\n      distributorId: new BN(0),\n      stakePoolId: stakePoolId,\n      amount: new BN(50),\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n    const rewardDistributorTokenAccountId = await findAta(\n      rewardDistributorData.parsed.rewardMint,\n      rewardDistributorId,\n      true\n    );\n    const rewardDistributorTokenAccount = await getAccount(\n      provider.connection,\n      rewardDistributorTokenAccountId\n    );\n\n    expect(Number(rewardDistributorTokenAccount.amount)).toEqual(50);\n  });\n});\n"]}