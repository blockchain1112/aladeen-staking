{"version":3,"file":"stake-treasury-max-supply.test.js","sourceRoot":"","sources":["../../../tests/reward-distribution/stake-treasury-max-supply.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta } from \"@cardinal/common\";\nimport { withWrapSol } from \"@cardinal/token-manager/dist/cjs/wrappedSol\";\nimport { BN } from \"@project-serum/anchor\";\nimport { getAccount } from \"@solana/spl-token\";\nimport type { Keypair } from \"@solana/web3.js\";\nimport { LAMPORTS_PER_SOL, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport {\n  claimRewards,\n  createStakeEntryAndStakeMint,\n  createStakePool,\n  stake,\n} from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport { withInitRewardDistributor } from \"../../src/programs/rewardDistributor/transaction\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMint, delay, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Stake and claim rewards from treasury\", () => {\n  const maxSupply = 5; // 5 wsol\n\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let stakeMintKeypair: Keypair | undefined;\n  let originalMintId: PublicKey;\n  const rewardMint = new PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  );\n  let originalMintTokenAccountId: PublicKey;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    [originalMintTokenAccountId, originalMintId] = await createMint(\n      provider.connection,\n      provider.wallet,\n      { amount: 1 }\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const transaction = new Transaction();\n\n    // wrapped sol to creator\n    await withWrapSol(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      maxSupply * LAMPORTS_PER_SOL\n    );\n\n    await withInitRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMint,\n        rewardAmount: new BN(1 * LAMPORTS_PER_SOL),\n        rewardDurationSeconds: new BN(2),\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply * LAMPORTS_PER_SOL),\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMint.toString()\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMint.toString()\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMint.toString()\n    );\n  });\n\n  it(\"Init stake entry and mint\", async () => {\n    let transaction: Transaction;\n\n    [transaction, , stakeMintKeypair] = await createStakeEntryAndStakeMint(\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await executeTransaction(\n      provider.connection,\n      transaction,\n      provider.wallet,\n      { signers: stakeMintKeypair ? [stakeMintKeypair] : [] }\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n      originalMintId.toString()\n    );\n    expect(stakeEntryData.parsed.pool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(stakeEntryData.parsed.stakeMint?.toString()).toEqual(\n      stakeMintKeypair?.publicKey.toString()\n    );\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Receipt,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    if (stakeMintKeypair) {\n      const userReceiptMintTokenAccountId = await findAta(\n        stakeMintKeypair.publicKey,\n        provider.wallet.publicKey,\n        true\n      );\n\n      expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n      expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n        provider.wallet.publicKey.toString()\n      );\n\n      const checkUserReceiptMintTokenAccountId = await getAccount(\n        provider.connection,\n        userReceiptMintTokenAccountId\n      );\n      expect(Number(checkUserReceiptMintTokenAccountId.amount)).toEqual(1);\n      expect(checkUserReceiptMintTokenAccountId.isFrozen).toEqual(true);\n    }\n  });\n\n  it(\"Claim Rewards\", async () => {\n    await delay(6000);\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n\n    const userRewardMintTokenAccountId = await findAta(\n      rewardMint,\n      provider.wallet.publicKey,\n      true\n    );\n\n    let beforeAmount = 0;\n    try {\n      beforeAmount = Number(\n        (await getAccount(provider.connection, userRewardMintTokenAccountId))\n          .amount\n      );\n    } catch (e) {\n      beforeAmount = 0;\n    }\n\n    const transaction = await claimRewards(\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const afterCheckUserRewardMintTokenAccountId = await getAccount(\n      provider.connection,\n      userRewardMintTokenAccountId\n    );\n    expect(Number(afterCheckUserRewardMintTokenAccountId.amount)).toEqual(\n      beforeAmount + 3000000000\n    );\n  });\n});\n"]}