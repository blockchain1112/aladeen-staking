{"version":3,"file":"create-entry-close-pool.test.js","sourceRoot":"","sources":["../../../tests/reward-distribution/create-entry-close-pool.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport {\n  createStakeEntry,\n  createStakePool,\n  rewardDistributor,\n  stake,\n  unstake,\n} from \"../../src\";\nimport { RewardDistributorKind } from \"../../src/programs/rewardDistributor\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport {\n  getStakeEntry,\n  getStakePool,\n} from \"../../src/programs/stakePool/accounts\";\nimport {\n  withCloseStakeEntry,\n  withCloseStakePool,\n} from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEdition, createMint, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Stake and claim rewards\", () => {\n  let provider: CardinalProvider;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  let rewardMintId: PublicKey;\n  let stakePoolId: PublicKey;\n\n  const maxSupply = 100;\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n\n    // reward mint\n    [, rewardMintId] = await createMint(provider.connection, provider.wallet, {\n      amount: maxSupply,\n    });\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Distributor\", async () => {\n    const transaction = new Transaction();\n    await rewardDistributor.transaction.withInitRewardDistributor(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        rewardMintId: rewardMintId,\n        kind: RewardDistributorKind.Treasury,\n        maxSupply: new BN(maxSupply),\n        defaultMultiplier: new BN(1),\n        multiplierDecimals: 1,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n\n    expect(rewardDistributorData.parsed.rewardMint.toString()).toEqual(\n      rewardMintId.toString()\n    );\n    expect(rewardDistributorData.parsed.defaultMultiplier.toNumber()).toEqual(\n      1\n    );\n    expect(rewardDistributorData.parsed.multiplierDecimals).toEqual(1);\n  });\n\n  it(\"Create Stake And Reward Entry\", async () => {\n    const rewardDistributorId = findRewardDistributorId(stakePoolId, new BN(0));\n    const [transaction, stakeEntryId] = await createStakeEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await rewardDistributor.transaction.withInitRewardEntry(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakeEntryId: stakeEntryId,\n        rewardDistributorId: rewardDistributorId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardDistributorData = await getRewardDistributor(\n      provider.connection,\n      rewardDistributorId\n    );\n    expect(rewardDistributorData.parsed.defaultMultiplier.toNumber()).toEqual(\n      1\n    );\n  });\n\n  test(\"Stake\", async () => {\n    await executeTransaction(\n      provider.connection,\n      await stake(provider.connection, provider.wallet, {\n        stakePoolId: stakePoolId,\n        originalMintId,\n        userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      }),\n      provider.wallet\n    );\n  });\n\n  it(\"Fail close pool\", async () => {\n    const transaction = await withCloseStakePool(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n      }\n    );\n    await expect(\n      executeTransaction(provider.connection, transaction, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n\n  test(\"Unstake\", async () => {\n    await executeTransaction(\n      provider.connection,\n      await unstake(provider.connection, provider.wallet, {\n        distributorId: new BN(0),\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }),\n      provider.wallet\n    );\n  });\n\n  it(\"Close entry then pool\", async () => {\n    const stakeEntryId = await findStakeEntryIdFromMint(\n      provider.connection,\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId\n    );\n    const transaction = new Transaction();\n    await withCloseStakeEntry(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n      }\n    );\n    await withCloseStakePool(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntry = await tryGetAccount(() =>\n      getStakeEntry(provider.connection, stakeEntryId)\n    );\n    expect(stakeEntry).toEqual(null);\n\n    const stakePool = await tryGetAccount(() =>\n      getStakePool(provider.connection, stakePoolId)\n    );\n    expect(stakePool).toEqual(null);\n  });\n});\n"]}