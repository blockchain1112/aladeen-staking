{"version":3,"file":"claim-stake-entry-funds-pool-authority.test.js","sourceRoot":"","sources":["../../../tests/claim-stake-entry-funds/claim-stake-entry-funds-pool-authority.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createMint,\n  findAta,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { beforeAll, expect, test } from \"@jest/globals\";\nimport { Wallet } from \"@project-serum/anchor\";\nimport {\n  createTransferCheckedInstruction,\n  getAccount,\n  getAssociatedTokenAddressSync,\n} from \"@solana/spl-token\";\nimport type { PublicKey } from \"@solana/web3.js\";\nimport { Keypair, LAMPORTS_PER_SOL, Transaction } from \"@solana/web3.js\";\n\nimport { createStakePool, stake } from \"../../src\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryId } from \"../../src/programs/stakePool/pda\";\nimport { withClaimStakeEntryFunds } from \"../../src/programs/stakePool/transaction\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport { createMasterEdition, executeTransaction } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\nlet provider: CardinalProvider;\nlet originalMintTokenAccountId: PublicKey;\nlet originalMintId: PublicKey;\nlet stakePoolId: PublicKey;\nlet customPaymentMint: PublicKey;\n\nconst initialSupply = 100000;\nconst transferAmount = 100;\nconst stakePoolAuthority = Keypair.generate();\n\ndescribe(\"Claim stake entry funds\", () => {\n  beforeAll(async () => {\n    provider = await getProvider();\n    const fromAirdropSignature = await provider.connection.requestAirdrop(\n      stakePoolAuthority.publicKey,\n      LAMPORTS_PER_SOL\n    );\n    await provider.connection.confirmTransaction(fromAirdropSignature);\n\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      provider.wallet\n    );\n    [, customPaymentMint] = await createMint(\n      provider.connection,\n      provider.wallet,\n      { amount: initialSupply }\n    );\n  });\n\n  test(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      new Wallet(stakePoolAuthority),\n      {}\n    );\n\n    await executeTransaction(\n      provider.connection,\n      transaction,\n      new Wallet(stakePoolAuthority)\n    );\n  });\n\n  test(\"Stake\", async () => {\n    await executeTransaction(\n      provider.connection,\n      await stake(provider.connection, provider.wallet, {\n        stakePoolId: stakePoolId,\n        originalMintId,\n        userOriginalMintTokenAccountId: originalMintTokenAccountId,\n        receiptType: ReceiptType.Original,\n      }),\n      provider.wallet\n    );\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = getAssociatedTokenAddressSync(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  test(\"Sends funds to stake entry\", async () => {\n    const transaction = new Transaction();\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n\n    const stakeEntryAtaId = await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      provider.connection,\n      customPaymentMint,\n      stakeEntryId,\n      provider.wallet.publicKey,\n      true\n    );\n    const authorityAtaId = await findAta(\n      customPaymentMint,\n      provider.wallet.publicKey,\n      true\n    );\n\n    transaction.add(\n      createTransferCheckedInstruction(\n        authorityAtaId,\n        customPaymentMint,\n        stakeEntryAtaId,\n        provider.wallet.publicKey,\n        transferAmount,\n        0\n      )\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const accountInfo = await getAccount(provider.connection, stakeEntryAtaId);\n    expect(accountInfo.amount.toString()).toEqual(transferAmount.toString());\n  });\n\n  test(\"Claim funds from stake entry\", async () => {\n    const transaction = new Transaction();\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n    const authorityAtaId = await findAta(\n      customPaymentMint,\n      provider.wallet.publicKey,\n      true\n    );\n    const beforeAccountData = await getAccount(\n      provider.connection,\n      authorityAtaId\n    );\n    expect(beforeAccountData.amount.toString()).toEqual(\n      (initialSupply - transferAmount).toString()\n    );\n\n    await withClaimStakeEntryFunds(\n      transaction,\n      provider.connection,\n      new Wallet(stakePoolAuthority),\n      stakeEntryId,\n      customPaymentMint\n    );\n\n    await executeTransaction(\n      provider.connection,\n      transaction,\n      new Wallet(stakePoolAuthority)\n    );\n\n    const afterAccountData = await getAccount(\n      provider.connection,\n      authorityAtaId\n    );\n    expect(afterAccountData.amount.toString()).toEqual(\n      initialSupply.toString()\n    );\n  });\n});\n"]}