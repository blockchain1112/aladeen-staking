{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../tests/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { findMintEditionId, findMintMetadataId } from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  createInitializeMint2Instruction,\n  createMintToInstruction,\n  getAssociatedTokenAddressSync,\n  getMinimumBalanceForRentExemptMint,\n  MINT_SIZE,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  Connection,\n  PublicKey,\n  SendTransactionError,\n  Signer,\n} from \"@solana/web3.js\";\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  sendAndConfirmRawTransaction,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {\n  createCreateMasterEditionV3Instruction,\n  createCreateMetadataAccountV2Instruction,\n} from \"mplx-v2\";\n\nexport function delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function newAccountWithLamports(\n  connection: Connection,\n  lamports = LAMPORTS_PER_SOL * 10,\n  keypair = Keypair.generate()\n): Promise<Keypair> {\n  const account = keypair;\n  const signature = await connection.requestAirdrop(\n    account.publicKey,\n    lamports\n  );\n  await connection.confirmTransaction(signature, \"confirmed\");\n  return account;\n}\n\nexport const createMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  config?: MintConfig\n): Promise<[PublicKey, PublicKey]> => {\n  const mintKeypair = Keypair.generate();\n  const mintId = mintKeypair.publicKey;\n  const [tx, ata] = await createMintTx(\n    connection,\n    mintKeypair.publicKey,\n    wallet.publicKey,\n    config\n  );\n  await executeTransaction(connection, tx, wallet, { signers: [mintKeypair] });\n  return [ata, mintId];\n};\n\nexport type MintConfig = {\n  target?: PublicKey;\n  amount?: number;\n  decimals?: number;\n};\nexport const createMintTx = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: MintConfig\n): Promise<[Transaction, PublicKey]> => {\n  const target = config?.target ?? authority;\n  const ata = getAssociatedTokenAddressSync(mintId, target, true);\n  return [\n    new Transaction().add(\n      SystemProgram.createAccount({\n        fromPubkey: authority,\n        newAccountPubkey: mintId,\n        space: MINT_SIZE,\n        lamports: await getMinimumBalanceForRentExemptMint(connection),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      createInitializeMint2Instruction(\n        mintId,\n        config?.decimals ?? 0,\n        authority,\n        authority\n      ),\n      createAssociatedTokenAccountInstruction(authority, ata, target, mintId),\n      createMintToInstruction(mintId, ata, authority, config?.amount ?? 1)\n    ),\n    ata,\n  ];\n};\n\nexport const createMasterEdition = async (\n  connection: Connection,\n  wallet: Wallet,\n  config?: { target?: PublicKey }\n): Promise<[PublicKey, PublicKey]> => {\n  const mintKeypair = Keypair.generate();\n  const mintId = mintKeypair.publicKey;\n  const target = config?.target ?? wallet.publicKey;\n  const ata = getAssociatedTokenAddressSync(mintId, target, true);\n  const tx = await createMasterEditionTx(\n    connection,\n    mintKeypair.publicKey,\n    wallet.publicKey,\n    config\n  );\n  await executeTransaction(connection, tx, wallet, { signers: [mintKeypair] });\n  return [ata, mintId];\n};\n\nexport const createMasterEditionTx = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: { target?: PublicKey }\n) => {\n  const target = config?.target ?? authority;\n  const ata = getAssociatedTokenAddressSync(mintId, target);\n  const metadataId = findMintMetadataId(mintId);\n  const editionId = findMintEditionId(mintId);\n\n  return new Transaction().add(\n    SystemProgram.createAccount({\n      fromPubkey: authority,\n      newAccountPubkey: mintId,\n      space: MINT_SIZE,\n      lamports: await getMinimumBalanceForRentExemptMint(connection),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    createInitializeMint2Instruction(mintId, 0, authority, authority),\n    createAssociatedTokenAccountInstruction(authority, ata, target, mintId),\n    createMintToInstruction(mintId, ata, authority, 1),\n    createCreateMetadataAccountV2Instruction(\n      {\n        metadata: metadataId,\n        mint: mintId,\n        updateAuthority: authority,\n        mintAuthority: authority,\n        payer: authority,\n      },\n      {\n        createMetadataAccountArgsV2: {\n          data: {\n            name: `name-${Math.random()}`,\n            symbol: \"SYMB\",\n            uri: `uri-${Math.random()}`,\n            sellerFeeBasisPoints: 0,\n            creators: [{ address: authority, share: 100, verified: true }],\n            collection: null,\n            uses: null,\n          },\n          isMutable: true,\n        },\n      }\n    ),\n    createCreateMasterEditionV3Instruction(\n      {\n        edition: editionId,\n        mint: mintId,\n        updateAuthority: authority,\n        mintAuthority: authority,\n        metadata: metadataId,\n        payer: authority,\n      },\n      { createMasterEditionArgs: { maxSupply: 0 } }\n    )\n  );\n};\n\nexport async function executeTransaction(\n  connection: Connection,\n  tx: Transaction,\n  wallet: Wallet,\n  config?: { signers?: Signer[]; silent?: boolean }\n): Promise<string> {\n  tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  tx.feePayer = wallet.publicKey;\n  tx = await wallet.signTransaction(tx);\n  if (config?.signers) {\n    tx.partialSign(...(config?.signers ?? []));\n  }\n  try {\n    const txid = await sendAndConfirmRawTransaction(connection, tx.serialize());\n    return txid;\n  } catch (e) {\n    if (!config?.silent) {\n      handleError(e);\n    }\n    throw e;\n  }\n}\n\nexport async function executeTransactions(\n  connection: Connection,\n  txs: Transaction[],\n  wallet: Wallet,\n  config?: { signers?: Signer[]; silent?: boolean }\n): Promise<string[]> {\n  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const signedTxs = await wallet.signAllTransactions(\n    txs.map((tx) => {\n      tx.recentBlockhash = latestBlockhash;\n      tx.feePayer = wallet.publicKey;\n      if (config?.signers) {\n        tx.partialSign(...(config?.signers ?? []));\n      }\n      return tx;\n    })\n  );\n  const txids = await Promise.all(\n    signedTxs.map(async (tx) => {\n      try {\n        const txid = await sendAndConfirmRawTransaction(\n          connection,\n          tx.serialize()\n        );\n        return txid;\n      } catch (e) {\n        if (!config?.silent) {\n          handleError(e);\n        }\n        throw e;\n      }\n    })\n  );\n  return txids;\n}\n\nexport const handleError = (e: any) => {\n  const message = (e as SendTransactionError).message ?? \"\";\n  const logs = (e as SendTransactionError).logs;\n  if (logs) {\n    console.error(logs, message);\n  } else {\n    console.error(e, message);\n  }\n};\n\n"]}