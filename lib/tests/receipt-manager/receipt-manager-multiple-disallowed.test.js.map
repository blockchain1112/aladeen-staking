{"version":3,"file":"receipt-manager-multiple-disallowed.test.js","sourceRoot":"","sources":["../../../tests/receipt-manager/receipt-manager-multiple-disallowed.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { findAta, tryGetAccount, withWrapSol } from \"@cardinal/common\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport { findPaymentManagerAddress } from \"@cardinal/payment-manager/dist/cjs/pda\";\nimport { withInit } from \"@cardinal/payment-manager/dist/cjs/transaction\";\nimport { BN, Wallet } from \"@project-serum/anchor\";\nimport { getAccount } from \"@solana/spl-token\";\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport { createStakeEntry, createStakePool, stake } from \"../../src\";\nimport { RECEIPT_MANAGER_PAYMENT_MANAGER_NAME } from \"../../src/programs/receiptManager\";\nimport {\n  getReceiptEntry,\n  getReceiptManager,\n  getRewardReceipt,\n} from \"../../src/programs/receiptManager/accounts\";\nimport {\n  findReceiptEntryId,\n  findReceiptManagerId,\n  findRewardReceiptId,\n} from \"../../src/programs/receiptManager/pda\";\nimport {\n  withClaimRewardReceipt,\n  withInitReceiptEntry,\n  withInitReceiptManager,\n  withInitRewardReceipt,\n  withSetRewardReceiptAllowed,\n  withUpdateReceiptManager,\n} from \"../../src/programs/receiptManager/transaction\";\nimport { ReceiptType } from \"../../src/programs/stakePool\";\nimport { getStakeEntry } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryId } from \"../../src/programs/stakePool/pda\";\nimport { findStakeEntryIdFromMint } from \"../../src/programs/stakePool/utils\";\nimport {\n  createMasterEdition,\n  executeTransaction,\n  newAccountWithLamports,\n} from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Receipt manages multiple with disallowlist\", () => {\n  let provider: CardinalProvider;\n  let originalMintTokenAccountId: PublicKey;\n  let originalMintId: PublicKey;\n  let stakePoolId: PublicKey;\n\n  const receiptManagerName1 = `mgr-${Math.random()}`;\n  const receiptManagerName2 = `mgr-${Math.random()}`;\n  const requiredStakeSeconds = new BN(0);\n  const stakeSecondsToUse = new BN(1);\n  const requiresAuthorization = false;\n\n  const MAKER_FEE = 0;\n  const TAKER_FEE = 0;\n  const feeCollector = Keypair.generate();\n  const paymentRecipient = Keypair.generate();\n  const paymentMint = new PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  );\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    // original mint\n    const mintAuthority = await newAccountWithLamports(provider.connection);\n    [originalMintTokenAccountId, originalMintId] = await createMasterEdition(\n      provider.connection,\n      new Wallet(mintAuthority),\n      { target: provider.wallet.publicKey }\n    );\n\n    const transaction = new Transaction();\n    await withWrapSol(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      LAMPORTS_PER_SOL\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create payment manager\", async () => {\n    const transaction = new Transaction();\n\n    const [paymentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    const checkIfPaymentManagerExists = await tryGetAccount(() =>\n      getPaymentManager(provider.connection, paymentManagerId)\n    );\n    if (!checkIfPaymentManagerExists) {\n      await withInit(\n        transaction,\n        provider.connection,\n        provider.wallet,\n        RECEIPT_MANAGER_PAYMENT_MANAGER_NAME,\n        feeCollector.publicKey,\n        MAKER_FEE,\n        TAKER_FEE,\n        false\n      );\n      await executeTransaction(\n        provider.connection,\n        transaction,\n        provider.wallet\n      );\n    }\n\n    const paymentManagerData = await getPaymentManager(\n      provider.connection,\n      paymentManagerId\n    );\n    expect(paymentManagerData.parsed.name).toEqual(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Create Reward Receipt Manager\", async () => {\n    const transaction = new Transaction();\n    const [, receiptManagerId] = await withInitReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName1,\n        stakePoolId: stakePoolId,\n        authority: provider.wallet.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: stakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    const [payamentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    expect(receiptManagerData.parsed.name.toString()).toEqual(\n      receiptManagerName1\n    );\n    expect(receiptManagerData.parsed.paymentManager.toString()).toEqual(\n      payamentManagerId.toString()\n    );\n    expect(receiptManagerData.parsed.authority.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(receiptManagerData.parsed.paymentMint.toString()).toEqual(\n      paymentMint.toString()\n    );\n    expect(receiptManagerData.parsed.stakePool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(receiptManagerData.parsed.requiredStakeSeconds.toString()).toEqual(\n      requiredStakeSeconds.toString()\n    );\n    expect(receiptManagerData.parsed.stakeSecondsToUse.toString()).toEqual(\n      stakeSecondsToUse.toString()\n    );\n    expect(receiptManagerData.parsed.requiresAuthorization.toString()).toEqual(\n      requiresAuthorization.toString()\n    );\n  });\n\n  it(\"Create Reward Receipt Manager\", async () => {\n    const transaction = new Transaction();\n    const [, receiptManagerId] = await withInitReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName2,\n        stakePoolId: stakePoolId,\n        authority: provider.wallet.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: stakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    const [payamentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    expect(receiptManagerData.parsed.name.toString()).toEqual(\n      receiptManagerName2\n    );\n    expect(receiptManagerData.parsed.paymentManager.toString()).toEqual(\n      payamentManagerId.toString()\n    );\n    expect(receiptManagerData.parsed.authority.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(receiptManagerData.parsed.paymentMint.toString()).toEqual(\n      paymentMint.toString()\n    );\n    expect(receiptManagerData.parsed.stakePool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(receiptManagerData.parsed.requiredStakeSeconds.toString()).toEqual(\n      requiredStakeSeconds.toString()\n    );\n    expect(receiptManagerData.parsed.stakeSecondsToUse.toString()).toEqual(\n      stakeSecondsToUse.toString()\n    );\n    expect(receiptManagerData.parsed.requiresAuthorization.toString()).toEqual(\n      requiresAuthorization.toString()\n    );\n  });\n\n  it(\"Init stake entry for pool\", async () => {\n    const [transaction, _] = await createStakeEntry(\n      provider.connection,\n      provider.wallet,\n      {\n        stakePoolId: stakePoolId,\n        originalMintId: originalMintId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    expect(stakeEntryData.parsed.originalMint.toString()).toEqual(\n      originalMintId.toString()\n    );\n    expect(stakeEntryData.parsed.pool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(stakeEntryData.parsed.stakeMint).toEqual(null);\n  });\n\n  it(\"Stake\", async () => {\n    const transaction = await stake(provider.connection, provider.wallet, {\n      stakePoolId: stakePoolId,\n      originalMintId: originalMintId,\n      userOriginalMintTokenAccountId: originalMintTokenAccountId,\n      receiptType: ReceiptType.Original,\n    });\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const stakeEntryData = await getStakeEntry(\n      provider.connection,\n      await findStakeEntryIdFromMint(\n        provider.connection,\n        provider.wallet.publicKey,\n        stakePoolId,\n        originalMintId\n      )\n    );\n\n    const userOriginalMintTokenAccountId = await findAta(\n      originalMintId,\n      provider.wallet.publicKey,\n      true\n    );\n\n    expect(stakeEntryData.parsed.lastStakedAt.toNumber()).toBeGreaterThan(0);\n    expect(stakeEntryData.parsed.lastStaker.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n\n    const checkUserOriginalTokenAccount = await getAccount(\n      provider.connection,\n      userOriginalMintTokenAccountId\n    );\n    expect(Number(checkUserOriginalTokenAccount.amount)).toEqual(1);\n    expect(checkUserOriginalTokenAccount.isFrozen).toEqual(true);\n  });\n\n  it(\"Init Receipt Entry\", async () => {\n    const transaction = new Transaction();\n\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n    const [, receiptEntryId] = await withInitReceiptEntry(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        stakeEntryId: stakeEntryId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptEntryData = await getReceiptEntry(\n      provider.connection,\n      receiptEntryId\n    );\n    expect(receiptEntryData.parsed.stakeEntry.toString()).toEqual(\n      receiptEntryData.parsed.stakeEntry.toString()\n    );\n    expect(receiptEntryData.parsed.usedStakeSeconds.toNumber()).toEqual(0);\n  });\n\n  it(\"Init Reward Receipt, first receipt manager\", async () => {\n    const transaction = new Transaction();\n\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName1\n    );\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n\n    const receiptEntryId = findReceiptEntryId(stakeEntryId);\n    const [, rewardReceiptId] = await withInitRewardReceipt(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        receiptManagerId: receiptManagerId,\n        receiptEntryId: receiptEntryId,\n        stakeEntryId: stakeEntryId,\n        payer: provider.wallet.publicKey,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardReceiptData = await getRewardReceipt(\n      provider.connection,\n      rewardReceiptId\n    );\n    expect(rewardReceiptData.parsed.allowed).toBeTruthy();\n    expect(rewardReceiptData.parsed.target.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(rewardReceiptData.parsed.receiptEntry.toString()).toEqual(\n      receiptEntryId.toString()\n    );\n    expect(rewardReceiptData.parsed.receiptManager.toString()).toEqual(\n      receiptManagerId.toString()\n    );\n  });\n\n  it(\"Init Reward Receipt, second receipt manager\", async () => {\n    const transaction = new Transaction();\n\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName2\n    );\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n\n    const receiptEntryId = findReceiptEntryId(stakeEntryId);\n    const [, rewardReceiptId] = await withInitRewardReceipt(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        receiptManagerId: receiptManagerId,\n        receiptEntryId: receiptEntryId,\n        stakeEntryId: stakeEntryId,\n        payer: provider.wallet.publicKey,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const rewardReceiptData = await getRewardReceipt(\n      provider.connection,\n      rewardReceiptId\n    );\n    expect(rewardReceiptData.parsed.allowed).toBeTruthy();\n    expect(rewardReceiptData.parsed.target.toString()).toEqual(\n      PublicKey.default.toString()\n    );\n    expect(rewardReceiptData.parsed.receiptEntry.toString()).toEqual(\n      receiptEntryId.toString()\n    );\n    expect(rewardReceiptData.parsed.receiptManager.toString()).toEqual(\n      receiptManagerId.toString()\n    );\n  });\n\n  it(\"Set requires authorization to true for second receipt manager\", async () => {\n    const transaction = new Transaction();\n\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName2\n    );\n    const beforeReceiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    expect(beforeReceiptManagerData.parsed.requiresAuthorization).toBeFalsy();\n\n    await withUpdateReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName2,\n        stakePoolId: stakePoolId,\n        authority: beforeReceiptManagerData.parsed.authority,\n        requiredStakeSeconds:\n          beforeReceiptManagerData.parsed.requiredStakeSeconds,\n        stakeSecondsToUse: beforeReceiptManagerData.parsed.stakeSecondsToUse,\n        paymentMint: beforeReceiptManagerData.parsed.paymentMint,\n        paymentRecipientId: beforeReceiptManagerData.parsed.paymentRecipient,\n        requiresAuthorization: true,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const afterReceiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    expect(afterReceiptManagerData.parsed.requiresAuthorization).toBeTruthy();\n  });\n\n  it(\"Set reward receipt auth to false, second receipt manager\", async () => {\n    const transaction = new Transaction();\n\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName2\n    );\n\n    const receiptEntryId = findReceiptEntryId(stakeEntryId);\n    const receiptId = findRewardReceiptId(receiptManagerId, receiptEntryId);\n    const beforeReceiptData = await getRewardReceipt(\n      provider.connection,\n      receiptId\n    );\n    expect(beforeReceiptData.parsed.allowed).toBeTruthy();\n\n    await withSetRewardReceiptAllowed(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        auth: false,\n        receiptManagerId: receiptManagerId,\n        rewardReceiptId: receiptId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const afterReceiptData = await getRewardReceipt(\n      provider.connection,\n      receiptId\n    );\n    expect(afterReceiptData.parsed.allowed).toBeFalsy();\n  });\n\n  it(\"Claim Reward Receipt, first receipt manager\", async () => {\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n    const receiptEntryId = findReceiptEntryId(stakeEntryId);\n    const paymentTokenAccountId = await findAta(\n      paymentMint,\n      paymentRecipient.publicKey,\n      true\n    );\n    let beforeBalance = 0;\n    try {\n      beforeBalance = Number(\n        (await getAccount(provider.connection, paymentTokenAccountId)).amount\n      );\n    } catch (e) {\n      beforeBalance = 0;\n    }\n\n    const transaction = new Transaction();\n    const [, rewardReceiptId] = await withClaimRewardReceipt(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        receiptManagerName: receiptManagerName1,\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n        claimer: provider.wallet.publicKey,\n        payer: provider.wallet.publicKey,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName1\n    );\n\n    const checkRewardReceiptData = await tryGetAccount(() =>\n      getRewardReceipt(provider.connection, rewardReceiptId)\n    );\n    expect(checkRewardReceiptData).not.toBeNull();\n    expect(checkRewardReceiptData?.parsed.target.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(checkRewardReceiptData?.parsed.receiptEntry.toString()).toEqual(\n      receiptEntryId.toString()\n    );\n    expect(checkRewardReceiptData?.parsed.receiptManager.toString()).toEqual(\n      receiptManagerId.toString()\n    );\n\n    const paymentTokenAccountData = await getAccount(\n      provider.connection,\n      paymentTokenAccountId\n    );\n    expect(paymentTokenAccountData.amount.toString()).toEqual(\n      (beforeBalance + 2 * 10 ** 6).toString()\n    );\n\n    const receiptEntryData = await getReceiptEntry(\n      provider.connection,\n      receiptEntryId\n    );\n    expect(receiptEntryData.parsed.usedStakeSeconds.toNumber()).toEqual(\n      stakeSecondsToUse.toNumber()\n    );\n  });\n\n  it(\"Fail to Claim Reward Receipt, second receipt manager\", async () => {\n    const stakeEntryId = findStakeEntryId(\n      provider.wallet.publicKey,\n      stakePoolId,\n      originalMintId,\n      false\n    );\n\n    const transaction = new Transaction();\n    await withClaimRewardReceipt(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        receiptManagerName: receiptManagerName2,\n        stakePoolId: stakePoolId,\n        stakeEntryId: stakeEntryId,\n        claimer: provider.wallet.publicKey,\n        payer: provider.wallet.publicKey,\n      }\n    );\n\n    await expect(\n      executeTransaction(provider.connection, transaction, provider.wallet, {\n        silent: true,\n      })\n    ).rejects.toThrow();\n  });\n});\n"]}