{"version":3,"file":"receipt-manager-update-close.test.js","sourceRoot":"","sources":["../../../tests/receipt-manager/receipt-manager-update-close.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport { findPaymentManagerAddress } from \"@cardinal/payment-manager/dist/cjs/pda\";\nimport { withInit } from \"@cardinal/payment-manager/dist/cjs/transaction\";\nimport { BN, Wallet } from \"@project-serum/anchor\";\nimport { Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { createStakePool } from \"../../src\";\nimport { RECEIPT_MANAGER_PAYMENT_MANAGER_NAME } from \"../../src/programs/receiptManager\";\nimport { getReceiptManager } from \"../../src/programs/receiptManager/accounts\";\nimport { findReceiptManagerId } from \"../../src/programs/receiptManager/pda\";\nimport {\n  withCloseReceiptManager,\n  withInitReceiptManager,\n  withUpdateReceiptManager,\n} from \"../../src/programs/receiptManager/transaction\";\nimport { executeTransaction, newAccountWithLamports } from \"../utils\";\nimport type { CardinalProvider } from \"../workspace\";\nimport { getProvider } from \"../workspace\";\n\ndescribe(\"Create update close receipt manager\", () => {\n  let provider: CardinalProvider;\n  let stakePoolId: PublicKey;\n  let invalidAuthority: Keypair;\n\n  const receiptManagerName = `mgr-${Math.random()}`;\n  const requiredStakeSeconds = new BN(5);\n  const stakeSecondsToUse = new BN(1);\n  const updatedStakeSecondsToUse = new BN(10);\n  const requiresAuthorization = false;\n\n  const MAKER_FEE = 0;\n  const TAKER_FEE = 0;\n  const feeCollector = Keypair.generate();\n  const paymentRecipient = Keypair.generate();\n  const paymentMint = new PublicKey(\n    \"So11111111111111111111111111111111111111112\"\n  );\n\n  beforeAll(async () => {\n    provider = await getProvider();\n    invalidAuthority = await newAccountWithLamports(provider.connection);\n  });\n\n  it(\"Create payment manager\", async () => {\n    const transaction = new Transaction();\n\n    const [paymentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    const checkIfPaymentManagerExists = await tryGetAccount(() =>\n      getPaymentManager(provider.connection, paymentManagerId)\n    );\n    if (!checkIfPaymentManagerExists) {\n      await withInit(\n        transaction,\n        provider.connection,\n        provider.wallet,\n        RECEIPT_MANAGER_PAYMENT_MANAGER_NAME,\n        feeCollector.publicKey,\n        MAKER_FEE,\n        TAKER_FEE,\n        false\n      );\n      await executeTransaction(\n        provider.connection,\n        transaction,\n        provider.wallet\n      );\n    }\n\n    const paymentManagerData = await getPaymentManager(\n      provider.connection,\n      paymentManagerId\n    );\n    expect(paymentManagerData.parsed.name).toEqual(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n  });\n\n  it(\"Create Pool\", async () => {\n    let transaction: Transaction;\n    [transaction, stakePoolId] = await createStakePool(\n      provider.connection,\n      provider.wallet,\n      {}\n    );\n\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n  });\n\n  it(\"Invalid authority\", async () => {\n    const transaction = new Transaction();\n    await withInitReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName,\n        stakePoolId: stakePoolId,\n        authority: invalidAuthority.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: stakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await expect(\n      executeTransaction(\n        provider.connection,\n        transaction,\n        new Wallet(invalidAuthority),\n        {\n          silent: true,\n        }\n      )\n    ).rejects.toThrow();\n  });\n\n  it(\"Create Reward Receipt Manager\", async () => {\n    const transaction = new Transaction();\n    const [, receiptManagerId] = await withInitReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName,\n        stakePoolId: stakePoolId,\n        authority: provider.wallet.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: stakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    const [payamentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    expect(receiptManagerData.parsed.paymentManager.toString()).toEqual(\n      payamentManagerId.toString()\n    );\n    expect(receiptManagerData.parsed.authority.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(receiptManagerData.parsed.paymentMint.toString()).toEqual(\n      paymentMint.toString()\n    );\n    expect(receiptManagerData.parsed.stakePool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(receiptManagerData.parsed.requiredStakeSeconds.toString()).toEqual(\n      requiredStakeSeconds.toString()\n    );\n    expect(receiptManagerData.parsed.stakeSecondsToUse.toString()).toEqual(\n      stakeSecondsToUse.toString()\n    );\n    expect(receiptManagerData.parsed.requiresAuthorization.toString()).toEqual(\n      requiresAuthorization.toString()\n    );\n  });\n\n  it(\"Invalid authority updated\", async () => {\n    const transaction = new Transaction();\n    await withUpdateReceiptManager(\n      transaction,\n      provider.connection,\n      new Wallet(invalidAuthority),\n      {\n        name: receiptManagerName,\n        stakePoolId: stakePoolId,\n        authority: invalidAuthority.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: stakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await expect(\n      executeTransaction(\n        provider.connection,\n        transaction,\n        new Wallet(invalidAuthority),\n        { silent: true }\n      )\n    ).rejects.toThrow();\n  });\n\n  it(\"Update reward receipt manager\", async () => {\n    const transaction = new Transaction();\n    const [, receiptManagerId] = await withUpdateReceiptManager(\n      transaction,\n      provider.connection,\n      provider.wallet,\n      {\n        name: receiptManagerName,\n        stakePoolId: stakePoolId,\n        authority: provider.wallet.publicKey,\n        requiredStakeSeconds: requiredStakeSeconds,\n        stakeSecondsToUse: updatedStakeSecondsToUse,\n        paymentMint: paymentMint,\n        paymentRecipientId: paymentRecipient.publicKey,\n        requiresAuthorization: requiresAuthorization,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerData = await getReceiptManager(\n      provider.connection,\n      receiptManagerId\n    );\n    const [payamentManagerId] = await findPaymentManagerAddress(\n      RECEIPT_MANAGER_PAYMENT_MANAGER_NAME\n    );\n    expect(receiptManagerData.parsed.paymentManager.toString()).toEqual(\n      payamentManagerId.toString()\n    );\n    expect(receiptManagerData.parsed.authority.toString()).toEqual(\n      provider.wallet.publicKey.toString()\n    );\n    expect(receiptManagerData.parsed.paymentMint.toString()).toEqual(\n      paymentMint.toString()\n    );\n    expect(receiptManagerData.parsed.stakePool.toString()).toEqual(\n      stakePoolId.toString()\n    );\n    expect(receiptManagerData.parsed.requiredStakeSeconds.toString()).toEqual(\n      requiredStakeSeconds.toString()\n    );\n    expect(receiptManagerData.parsed.stakeSecondsToUse.toString()).toEqual(\n      updatedStakeSecondsToUse.toString()\n    );\n    expect(receiptManagerData.parsed.requiresAuthorization.toString()).toEqual(\n      requiresAuthorization.toString()\n    );\n  });\n\n  it(\"Close reward receipt manager\", async () => {\n    const receiptManagerId = findReceiptManagerId(\n      stakePoolId,\n      receiptManagerName\n    );\n    const transaction = await withCloseReceiptManager(\n      new Transaction(),\n      provider.connection,\n      provider.wallet,\n      {\n        receiptManagerId,\n      }\n    );\n    await executeTransaction(provider.connection, transaction, provider.wallet);\n\n    const receiptManagerData = await tryGetAccount(() =>\n      getReceiptManager(provider.connection, receiptManagerId)\n    );\n    expect(receiptManagerData).toEqual(null);\n  });\n});\n"]}