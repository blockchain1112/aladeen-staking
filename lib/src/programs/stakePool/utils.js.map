{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/utils.ts"],"names":[],"mappings":";;;AAAA,6CAAwE;AACxE,kDAAoE;AAUpE,4DAG8B;AAC9B,kDAAmE;AAEnE,wBAAuD;AACvD,+BAAmE;AAE5D,MAAM,kCAAkC,GAAG,CAChD,WAAsB,EACtB,cAAyB,EACV,EAAE;IACjB,MAAM,0BAA0B,GAAG,IAAA,8BAAwB,EACzD,WAAW,EACX,cAAc,CACf,CAAC;IACF,OAAO;QACL;YACE,MAAM,EAAE,0BAA0B;YAClC,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,KAAK;SAClB;KACF,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,kCAAkC,sCAe7C;AAEK,MAAM,+BAA+B,GAAG,KAAK,EAClD,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,YAAuB,EACvB,WAAyC,EACjB,EAAE;IAC1B,IAAI,WAAW,EAAE;QACf,MAAM,iCAAiC,GACrC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,WAAW,EACX,YAAY,EACZ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;QACJ,OAAO;YACL;gBACE,MAAM,EAAE,iCAAiC;gBACzC,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,KAAK;aAClB;SACF,CAAC;KACH;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC,CAAC;AA3BW,QAAA,+BAA+B,mCA2B1C;AAEF;;;;GAIG;AACI,MAAM,wBAAwB,GAAG,KAAK,EAC3C,WAAuB,EACvB,MAAiB,EACjB,WAAsB,EACtB,cAAyB,EACzB,WAAqB,EACD,EAAE;IACtB,OAAO,IAAA,sBAAgB,EAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;AAC/D,CAAC,CAAC;AARW,QAAA,wBAAwB,4BAQnC;AAEK,MAAM,oBAAoB,GAAG,KAAK,EACvC,UAAsB,EACtB,YAAuB,EACV,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,gBAAgB,GAAG,IAAI,gBAAO,CAClC,iBAAc,EACd,qBAAkB,EAClB,QAAQ,CACT,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC7E,OAAO,MAAM,CAAC,iBAAiB,CAAC;AAClC,CAAC,CAAC;AAdW,QAAA,oBAAoB,wBAc/B;AAEK,MAAM,qBAAqB,GAAG,KAAK,EACxC,UAAsB,EACtB,YAAuB,EACV,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,gBAAgB,GAAG,IAAI,gBAAO,CAClC,iBAAc,EACd,qBAAkB,EAClB,QAAQ,CACT,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAE7E,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC;IAC9D,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,WAAE,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC;AAjBW,QAAA,qBAAqB,yBAiBhC;AAEK,MAAM,mBAAmB,GAAG,KAAK,EACtC,UAAsB,EACtB,WAAsB,EACtB,aAAiB,EACJ,EAAE;;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,iBAAiB,GAAG,IAAI,gBAAO,CACnC,0CAAsB,EACtB,8CAA0B,EAC1B,QAAQ,CACT,CAAC;IAEF,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EACjD,WAAW,EACX,aAAa,CACd,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CACpE,mBAAmB,CACpB,CAAC;IACF,OAAO,MAAM,CAAC,SAAS;QACrB,CAAC,CAAC,IAAI,WAAE,CAAC,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,QAAQ,EAAE,IAAG,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QACxE,CAAC,CAAC,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AAxBW,QAAA,mBAAmB,uBAwB9B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,WAAsB,EACtB,aAAiB,EACJ,EAAE;IACf,6DAA6D;IAC7D,aAAa;IACb,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC1D,MAAM,iBAAiB,GAAG,IAAI,gBAAO,CACnC,0CAAsB,EACtB,8CAA0B,EAC1B,QAAQ,CACT,CAAC;IAEF,MAAM,mBAAmB,GAAG,IAAA,6BAAuB,EACjD,WAAW,EACX,aAAa,CACd,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CACpE,mBAAmB,CACpB,CAAC;IACF,OAAO,MAAM,CAAC,aAAa,CAAC;AAC9B,CAAC,CAAC;AAtBW,QAAA,iBAAiB,qBAsB5B","sourcesContent":["import { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\nimport { AnchorProvider, BN, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { REWARD_DISTRIBUTOR_PROGRAM } from \"../rewardDistributor\";\nimport {\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_IDL,\n} from \"../rewardDistributor\";\nimport { findRewardDistributorId } from \"../rewardDistributor/pda\";\nimport type { STAKE_POOL_PROGRAM } from \".\";\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\nimport { findStakeAuthorizationId, findStakeEntryId } from \"./pda\";\n\nexport const remainingAccountsForInitStakeEntry = (\n  stakePoolId: PublicKey,\n  originalMintId: PublicKey\n): AccountMeta[] => {\n  const stakeAuthorizationRecordId = findStakeAuthorizationId(\n    stakePoolId,\n    originalMintId\n  );\n  return [\n    {\n      pubkey: stakeAuthorizationRecordId,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n};\n\nexport const withRemainingAccountsForUnstake = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  stakeEntryId: PublicKey,\n  receiptMint: PublicKey | null | undefined\n): Promise<AccountMeta[]> => {\n  if (receiptMint) {\n    const stakeEntryReceiptMintTokenAccount =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        receiptMint,\n        stakeEntryId,\n        wallet.publicKey,\n        true\n      );\n    return [\n      {\n        pubkey: stakeEntryReceiptMintTokenAccount,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\n/**\n * Convenience method to find the stake entry id from a mint\n * NOTE: This will lookup the mint on-chain to get the supply\n * @returns\n */\nexport const findStakeEntryIdFromMint = async (\n  _connection: Connection,\n  wallet: PublicKey,\n  stakePoolId: PublicKey,\n  originalMintId: PublicKey,\n  _isFungible?: boolean\n): Promise<PublicKey> => {\n  return findStakeEntryId(wallet, stakePoolId, originalMintId);\n};\n\nexport const getTotalStakeSeconds = async (\n  connection: Connection,\n  stakeEntryId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\n  return parsed.totalStakeSeconds;\n};\n\nexport const getActiveStakeSeconds = async (\n  connection: Connection,\n  stakeEntryId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\n\n  const UTCNow = Math.floor(Date.now() / 1000);\n  const lastStakedAt = parsed.lastStakedAt.toNumber() || UTCNow;\n  return parsed.lastStaker ? new BN(UTCNow - lastStakedAt) : new BN(0);\n};\n\nexport const getUnclaimedRewards = async (\n  connection: Connection,\n  stakePoolId: PublicKey,\n  distributorId: BN\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const rewardDistributorId = findRewardDistributorId(\n    stakePoolId,\n    distributorId\n  );\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\n    rewardDistributorId\n  );\n  return parsed.maxSupply\n    ? new BN(parsed.maxSupply?.toNumber() - parsed.rewardsIssued.toNumber())\n    : new BN(0);\n};\n\nexport const getClaimedRewards = async (\n  connection: Connection,\n  stakePoolId: PublicKey,\n  distributorId: BN\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const rewardDistributorId = findRewardDistributorId(\n    stakePoolId,\n    distributorId\n  );\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\n    rewardDistributorId\n  );\n  return parsed.rewardsIssued;\n};\n"]}