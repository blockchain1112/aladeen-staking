{"version":3,"file":"checkZerosStakePool.js","sourceRoot":"","sources":["../../../tools/maintenance/checkZerosStakePool.ts"],"names":[],"mappings":";;;AAAA,kDAAkE;AAIlE,4EAG8C;AAC9C,8CAA8C;AAE9C,MAAM,OAAO,GAAG,SAAS,CAAC;AAC1B,wBAAwB;AAEjB,MAAM,wBAAwB,GAAG,KAAK,EAAE,UAAsB,EAAE,EAAE;IACvE,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,8CAA0B,EAC1B;QACE,OAAO,EAAE;YACP;gBACE,MAAM,EAAE;oBACN,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAC5B,2BAAkB,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAC7D;iBACF;aACF;SACF;KACF,CACF,CAAC;IACF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAjBW,QAAA,wBAAwB,4BAiBnC;AAEF,MAAM,UAAU,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IAC3C,MAAM,UAAU,GAAG,IAAA,0BAAa,EAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,KAAK,GAAG,IAAI,2BAAkB,CAAC,0CAAsB,CAAC,CAAC;IAC7D,MAAM,qBAAqB,GAAG,MAAM,IAAA,gCAAwB,EAAC,UAAU,CAAC,CAAC;IACzE,OAAO,CAAC,GAAG,CACT,yBAAyB,qBAAqB,CAAC,MAAM,gCAAgC,CACtF,CAAC;IACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrD,MAAM,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAE,CAAC;QACpC,MAAM,qBAAqB,GAA0B,KAAK,CAAC,MAAM,CAC/D,mBAAmB,EACnB,CAAC,CAAC,OAAO,CAAC,IAAI,CACf,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,MAAM,CAChC,mBAAmB,EACnB,qBAAqB,CACtB,CAAC;QACF,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YAC7D,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,qBAAqB,CAAC,CAAC;SACzD;KACF;AACH,CAAC,CAAC;AAEF,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { BorshAccountsCoder, utils } from \"@project-serum/anchor\";\nimport type { Connection } from \"@solana/web3.js\";\n\nimport type { RewardDistributorData } from \"../../src/programs/rewardDistributor\";\nimport {\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_IDL,\n} from \"../../src/programs/rewardDistributor\";\nimport { connectionFor } from \"../connection\";\n\nconst CLUSTER = \"mainnet\";\n// const MAX_SIZE = 400;\n\nexport const getAllRewardDistributors = async (connection: Connection) => {\n  const programAccounts = await connection.getProgramAccounts(\n    REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"rewardDistributor\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  return programAccounts;\n};\n\nconst checkZeros = async (cluster: string) => {\n  const connection = connectionFor(cluster);\n  const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);\n  const allRewardDistributors = await getAllRewardDistributors(connection);\n  console.log(\n    `--------- Check zeros ${allRewardDistributors.length} reward distributors ---------`\n  );\n  for (let i = 0; i < allRewardDistributors.length; i++) {\n    const r = allRewardDistributors[i]!;\n    const rewardDistributorData: RewardDistributorData = coder.decode(\n      \"rewardDistributor\",\n      r.account.data\n    );\n    const encoded = await coder.encode(\n      \"rewardDistributor\",\n      rewardDistributorData\n    );\n    if (r.account.data.slice(encoded.length).some((b) => b !== 0)) {\n      console.log(r.pubkey.toString(), rewardDistributorData);\n    }\n  }\n};\n\ncheckZeros(CLUSTER).catch((e) => console.log(e));\n"]}