{"version":3,"file":"resizeEntries.js","sourceRoot":"","sources":["../../../tools/maintenance/resizeEntries.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  AnchorProvider,\n  BorshAccountsCoder,\n  Program,\n  utils,\n  Wallet,\n} from \"@project-serum/anchor\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport * as dotenv from \"dotenv\";\n\nimport { executeTransaction } from \"../../src\";\nimport type {\n  STAKE_POOL_PROGRAM,\n  StakeEntryData,\n} from \"../../src/programs/stakePool\";\nimport {\n  STAKE_POOL_ADDRESS,\n  STAKE_POOL_IDL,\n} from \"../../src/programs/stakePool\";\nimport { connectionFor } from \"../connection\";\nimport { chunkArray } from \"../utils\";\n\ndotenv.config();\n\nconst wallet = Keypair.fromSecretKey(\n  utils.bytes.bs58.decode(process.env.WALLET || \"\")\n);\nconst CLUSTER = \"mainnet-beta\";\nconst BATCH_SIZE = 20;\nconst PARALLEL_TRANSACTIONS = 100;\nconst MAX_RETRIES = 3;\nconst DRY_RUN = true;\nconst ALLOWED_ENTRY_IDS: string[] = [];\n\nexport const getAllStakeEntries = async (connection: Connection) => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  return programAccounts;\n};\n\nconst fillEntryZeros = async (cluster: string) => {\n  console.log(`wallet=${wallet.publicKey.toString()}`);\n  // setup\n  const connection = connectionFor(cluster);\n  const provider = new AnchorProvider(connection, new Wallet(wallet), {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  const allStakeEntries = await getAllStakeEntries(connection);\n\n  //// parsed\n  const minPadding = 216;\n  const parsedStakeEntries: AccountData<StakeEntryData>[] = [];\n  const poolCounts: { [poolId: string]: number } = {};\n  for (let i = 0; i < allStakeEntries.length; i++) {\n    const a = allStakeEntries[i]!;\n    try {\n      const stakeEntryData: StakeEntryData =\n        stakePoolProgram.coder.accounts.decode(\"stakeEntry\", a.account.data);\n      if (a.account.data.length < minPadding) {\n        const poolId = stakeEntryData.pool.toString();\n        const c = poolCounts[poolId] ?? 0;\n        poolCounts[poolId] = c + 1;\n        parsedStakeEntries.push({ pubkey: a.pubkey, parsed: stakeEntryData });\n      }\n    } catch (e) {\n      // console.log(`[error] ${a.pubkey.toString()}`, e);\n    }\n  }\n\n  console.log(poolCounts);\n\n  const filteredEntries = parsedStakeEntries.filter((p) =>\n    ALLOWED_ENTRY_IDS.length > 0\n      ? ALLOWED_ENTRY_IDS.includes(p.pubkey.toString())\n      : true\n  );\n  const transactionsData: {\n    transaction: Transaction;\n    accountsInTx: AccountData<StakeEntryData>[];\n  }[] = [];\n\n  console.log(`\\nTotal=${filteredEntries.length}`);\n  const chunkedEntries = chunkArray(filteredEntries, BATCH_SIZE);\n  for (let i = 0; i < chunkedEntries.length; i++) {\n    const stakeEntries = chunkedEntries[i]!;\n    console.log(`\\n>> (${i + 1}/${chunkedEntries.length})`);\n    const transaction = new Transaction();\n    const accountsInTx: AccountData<StakeEntryData>[] = [];\n    for (let j = 0; j < stakeEntries.length; j++) {\n      const stakeEntryData = stakeEntries[j]!;\n      console.log(`>>> Entry (${stakeEntryData.pubkey.toString()})`);\n      console.log(stakeEntryData);\n      try {\n        transaction.add(\n          stakePoolProgram.instruction.stakeEntryResize({\n            accounts: {\n              stakeEntry: stakeEntryData.pubkey,\n              payer: wallet.publicKey,\n              systemProgram: SystemProgram.programId,\n            },\n          })\n        );\n        accountsInTx.push(stakeEntryData);\n      } catch (e: unknown) {\n        console.log(\n          `Failed to add IXs for pool (${stakeEntryData.pubkey.toString()})`\n        );\n      }\n    }\n\n    transactionsData.push({\n      transaction,\n      accountsInTx,\n    });\n  }\n\n  console.log(`\\n\\nTransactions=${transactionsData.length}`);\n\n  const chunkedTxDatas = chunkArray(transactionsData, PARALLEL_TRANSACTIONS);\n  for (let i = 0; i < chunkedTxDatas.length; i++) {\n    const txDatas = chunkedTxDatas[i]!;\n    console.log(`> (${i + 1}/${chunkedTxDatas.length})`);\n    await Promise.all(\n      txDatas.map(async ({ transaction, accountsInTx }) => {\n        let attempts = 0;\n        let txid;\n        while (attempts <= MAX_RETRIES && !txid) {\n          try {\n            if (!DRY_RUN && transaction.instructions.length > 0) {\n              txid = await executeTransaction(\n                connection,\n                new Wallet(wallet),\n                transaction,\n                {}\n              );\n            }\n          } catch (e) {\n            console.log(e);\n          }\n          attempts += 1;\n        }\n        if (txid) {\n          console.log(\n            `Succesful [${accountsInTx\n              .map((e) => e.pubkey.toString())\n              .join()}] with transaction ${txid} (https://explorer.solana.com/tx/${txid}?cluster=${cluster})`\n          );\n        } else {\n          console.log(\n            `Failed [${accountsInTx.map((e) => e.pubkey.toString()).join()}]`\n          );\n        }\n      })\n    );\n  }\n};\n\nfillEntryZeros(CLUSTER).catch((e) => console.log(e));\n"]}