{"version":3,"file":"fillPoolZeros.js","sourceRoot":"","sources":["../../../tools/maintenance/fillPoolZeros.ts"],"names":[],"mappings":";;AACA,kDAA+E;AAC/E,6CAAuD;AAEvD,mCAA+C;AAK/C,4DAGsC;AACtC,oEAAyE;AACzE,8CAA8C;AAC9C,oCAAsC;AAEtC,MAAM,MAAM,GAAG,iBAAO,CAAC,aAAa,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAElE,MAAM,OAAO,GAAG,QAAQ,CAAC;AACzB,MAAM,UAAU,GAAG,EAAE,CAAC;AACtB,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,QAAQ,GAAG,GAAG,CAAC;AACrB,MAAM,OAAO,GAAG,KAAK,CAAC;AACtB,MAAM,gBAAgB,GAAG,CAAC,8CAA8C,CAAC,CAAC;AAE1E,MAAM,aAAa,GAAG,KAAK,EAAE,OAAe,EAAE,EAAE;IAC9C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzC,MAAM,UAAU,GAAG,IAAA,0BAAa,EAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAG,IAAI,uBAAc,CAAC,UAAU,EAAE,IAAI,eAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;IACxE,MAAM,gBAAgB,GAAG,IAAI,gBAAO,CAClC,0BAAc,EACd,8BAAkB,EAClB,QAAQ,CACT,CAAC;IAEF,MAAM,aAAa,GAAG,CAAC,MAAM,IAAA,2BAAgB,EAAC,UAAU,CAAC,CAAC;SACvD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7D,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACtB,OAAO,CAAC,GAAG,CAAC,wBAAwB,aAAa,CAAC,MAAM,kBAAkB,CAAC,CAAC;IAE5E,MAAM,gBAAgB,GAGhB,EAAE,CAAC;IACT,MAAM,YAAY,GAAG,IAAA,kBAAU,EAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC5C,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CACT,sBAAsB,CAAC,GAAG,CAAC,OAAO,YAAY,CAAC,MAAM,WAAW,CACjE,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;QACtC,MAAM,YAAY,GAAiC,EAAE,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,MAAM,aAAa,GAAG,UAAU,CAAC,CAAC,CAAE,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,YAAY,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC5D,IAAI;gBACF,WAAW,CAAC,GAAG,CACb,gBAAgB,CAAC,WAAW,CAAC,kBAAkB,CAAC;oBAC9C,QAAQ,EAAE;wBACR,SAAS,EAAE,aAAa,CAAC,MAAM;qBAChC;iBACF,CAAC,CACH,CAAC;gBACF,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aAClC;YAAC,OAAO,CAAU,EAAE;gBACnB,OAAO,CAAC,GAAG,CACT,+BAA+B,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAClE,CAAC;aACH;SACF;QAED,gBAAgB,CAAC,IAAI,CAAC;YACpB,WAAW;YACX,YAAY;SACb,CAAC,CAAC;KACJ;IAED,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;IAC/C,MAAM,OAAO,CAAC,GAAG,CACf,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,EAAE;QAC3D,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,IAAI,CAAC;QACT,OAAO,QAAQ,IAAI,WAAW,IAAI,CAAC,IAAI,EAAE;YACvC,IAAI;gBACF,IAAI,CAAC,OAAO,EAAE;oBACZ,IAAI,GAAG,MAAM,IAAA,wBAAkB,EAC7B,UAAU,EACV,IAAI,eAAM,CAAC,MAAM,CAAC,EAClB,WAAW,EACX,EAAE,CACH,CAAC;iBACH;aACF;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;YACD,QAAQ,IAAI,CAAC,CAAC;SACf;QACD,IAAI,IAAI,EAAE;YACR,OAAO,CAAC,GAAG,CACT,cAAc,YAAY;iBACvB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;iBAC/B,IAAI,EAAE,sBAAsB,IAAI,oCAAoC,IAAI,YAAY,OAAO,GAAG,CAClG,CAAC;SACH;aAAM;YACL,OAAO,CAAC,GAAG,CACT,WAAW,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,GAAG,CAClE,CAAC;SACH;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { AnchorProvider, Program, utils, Wallet } from \"@project-serum/anchor\";\nimport { Keypair, Transaction } from \"@solana/web3.js\";\n\nimport { executeTransaction } from \"../../src\";\nimport type {\n  STAKE_POOL_PROGRAM,\n  StakePoolData,\n} from \"../../src/programs/stakePool\";\nimport {\n  STAKE_POOL_ADDRESS,\n  STAKE_POOL_IDL,\n} from \"../../src/programs/stakePool\";\nimport { getAllStakePools } from \"../../src/programs/stakePool/accounts\";\nimport { connectionFor } from \"../connection\";\nimport { chunkArray } from \"../utils\";\n\nconst wallet = Keypair.fromSecretKey(utils.bytes.bs58.decode(\"\"));\n\nconst CLUSTER = \"devnet\";\nconst BATCH_SIZE = 20;\nconst MAX_RETRIES = 3;\nconst MAX_SIZE = 400;\nconst DRY_RUN = false;\nconst ALLOWED_POOL_IDS = [\"2s3qXuGyMNedXS61Vi9XsRx7HuryyyZUYGyMtCrKUXva\"];\n\nconst fillPoolZeros = async (cluster: string) => {\n  console.log(wallet.publicKey.toString());\n  const connection = connectionFor(cluster);\n  const provider = new AnchorProvider(connection, new Wallet(wallet), {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n\n  const allStakePools = (await getAllStakePools(connection))\n    .filter((p) => ALLOWED_POOL_IDS.includes(p.pubkey.toString()))\n    .slice(0, MAX_SIZE);\n  console.log(`--------- Fill zeros ${allStakePools.length} pools ---------`);\n\n  const transactionsData: {\n    transaction: Transaction;\n    accountsInTx: AccountData<StakePoolData>[];\n  }[] = [];\n  const chunkedPools = chunkArray(allStakePools, BATCH_SIZE);\n  for (let i = 0; i < chunkedPools.length; i++) {\n    const stakePools = chunkedPools[i]!;\n    console.log(\n      `\\n\\n-------- Chunk ${i + 1} of ${chunkedPools.length} --------`\n    );\n    const transaction = new Transaction();\n    const accountsInTx: AccountData<StakePoolData>[] = [];\n    for (let j = 0; j < stakePools.length; j++) {\n      const stakePoolData = stakePools[j]!;\n      console.log(`>> Pool (${stakePoolData.pubkey.toString()})`);\n      try {\n        transaction.add(\n          stakePoolProgram.instruction.stakePoolFillZeros({\n            accounts: {\n              stakePool: stakePoolData.pubkey,\n            },\n          })\n        );\n        accountsInTx.push(stakePoolData);\n      } catch (e: unknown) {\n        console.log(\n          `Failed to add IXs for pool (${stakePoolData.pubkey.toString()})`\n        );\n      }\n    }\n\n    transactionsData.push({\n      transaction,\n      accountsInTx,\n    });\n  }\n\n  console.log(`\\n\\n--------- Results ---------`);\n  await Promise.all(\n    transactionsData.map(async ({ transaction, accountsInTx }) => {\n      let attempts = 0;\n      let txid;\n      while (attempts <= MAX_RETRIES && !txid) {\n        try {\n          if (!DRY_RUN) {\n            txid = await executeTransaction(\n              connection,\n              new Wallet(wallet),\n              transaction,\n              {}\n            );\n          }\n        } catch (e) {\n          console.log(e);\n        }\n        attempts += 1;\n      }\n      if (txid) {\n        console.log(\n          `Succesful [${accountsInTx\n            .map((e) => e.pubkey.toString())\n            .join()}] with transaction ${txid} (https://explorer.solana.com/tx/${txid}?cluster=${cluster})`\n        );\n      } else {\n        console.log(\n          `Failed [${accountsInTx.map((e) => e.pubkey.toString()).join()}]`\n        );\n      }\n    })\n  );\n};\n\nfillPoolZeros(CLUSTER).catch((e) => console.log(e));\n"]}