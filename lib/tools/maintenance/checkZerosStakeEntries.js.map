{"version":3,"file":"checkZerosStakeEntries.js","sourceRoot":"","sources":["../../../tools/maintenance/checkZerosStakeEntries.ts"],"names":[],"mappings":"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","sourcesContent":["import { BorshAccountsCoder, utils } from \"@project-serum/anchor\";\nimport type { Connection } from \"@solana/web3.js\";\nimport * as dotenv from \"dotenv\";\n\nimport type { StakeEntryData } from \"../../src/programs/stakePool\";\nimport {\n  STAKE_POOL_ADDRESS,\n  STAKE_POOL_IDL,\n} from \"../../src/programs/stakePool\";\nimport { connectionFor } from \"../connection\";\n\ndotenv.config();\n\nconst CLUSTER = \"devnet\";\n// const MAX_SIZE = 400;\n\nexport const getAllStakeEntries = async (connection: Connection) => {\n  const programAccounts = await connection.getProgramAccounts(\n    STAKE_POOL_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"stakeEntry\")\n            ),\n          },\n        },\n      ],\n    }\n  );\n  return programAccounts;\n};\n\nconst checkZeros = async (cluster: string) => {\n  const connection = connectionFor(cluster);\n  const coder = new BorshAccountsCoder(STAKE_POOL_IDL);\n  const allStakeEntries = await getAllStakeEntries(connection);\n  console.log(\n    `--------- Check zeros ${allStakeEntries.length} stake entries ---------`\n  );\n  const poolCounts: { [poolId: string]: number } = {};\n  let minPadding = 9999999;\n  for (let i = 0; i < allStakeEntries.length; i++) {\n    const a = allStakeEntries[i]!;\n    try {\n      const stakeEntryData: StakeEntryData = coder.decode(\n        \"stakeEntry\",\n        a.account.data\n      );\n      const encoded = await coder.encode(\"stakeEntry\", stakeEntryData);\n      if (\n        stakeEntryData.cooldownStartSeconds !== null &&\n        stakeEntryData.stakeMint !== null\n      ) {\n        console.log(\"--------\", a.pubkey.toString());\n      }\n      if (a.account.data.slice(encoded.length).length <= minPadding) {\n        console.log(\n          a.account.data.slice(encoded.length).length,\n          a.pubkey.toString()\n        );\n        minPadding = a.account.data.slice(encoded.length).length;\n      }\n      if (a.account.data.slice(encoded.length).some((b) => b !== 0)) {\n        const poolId = stakeEntryData.pool.toString();\n        const c = poolCounts[poolId] ?? 0;\n        poolCounts[poolId] = c + 1;\n        console.log(\n          stakeEntryData.pool.toString(),\n          a.pubkey.toString(),\n          stakeEntryData\n        );\n      }\n    } catch (e) {\n      console.log(`[error] ${a.pubkey.toString()}`, e);\n    }\n  }\n  console.log(minPadding);\n  console.log(poolCounts);\n};\n\ncheckZeros(CLUSTER).catch((e) => console.log(e));\n"]}