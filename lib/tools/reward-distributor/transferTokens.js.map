{"version":3,"file":"transferTokens.js","sourceRoot":"","sources":["../../../tools/reward-distributor/transferTokens.ts"],"names":[],"mappings":";;;AAAA,6CAAwE;AAExE,iDAG2B;AAE3B,6CAAyD;AAEzD,mCAA+C;AAElC,QAAA,WAAW,GAAG,gBAAgB,CAAC;AAC/B,QAAA,WAAW,GAAG,kCAAkC,CAAC;AAEvD,MAAM,OAAO,GAAG,CAAC,WAAuB,EAAE,OAAe,EAAE,EAAE,CAAC,CAAC;IACpE,IAAI,EAAE,IAAI,mBAAS,CAAC,EAAE,CAAC;IACvB,mBAAmB,EAAE,IAAI,mBAAS,CAAC,EAAE,CAAC;IACtC,MAAM,EAAE,CAAC;IACT,QAAQ,EAAE,CAAC;CACZ,CAAC,CAAC;AALU,QAAA,OAAO,WAKjB;AAEI,MAAM,OAAO,GAAG,KAAK,EAC1B,UAAsB,EACtB,MAAc,EACd,IAAgC,EAChC,EAAE;IACF,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAC7D,MAAM,UAAU,GAAG,IAAA,yCAA6B,EAC9C,IAAI,EACJ,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEF,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;IACtC,MAAM,sBAAsB,GAAG,MAAM,IAAA,6CAAoC,EACvE,WAAW,EACX,UAAU,EACV,IAAI,EACJ,mBAAmB,EACnB,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEF,WAAW,CAAC,GAAG,CACb,IAAA,4CAAgC,EAC9B,UAAU,EACV,IAAI,EACJ,sBAAsB,EACtB,MAAM,CAAC,SAAS,EAChB,MAAM,EACN,QAAQ,CACT,CACF,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,IAAA,wBAAkB,EAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC3E,OAAO,CAAC,GAAG,CAAC,4CAA4C,IAAI,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC;AAnCW,QAAA,OAAO,WAmClB","sourcesContent":["import { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor\";\nimport {\n  createTransferCheckedInstruction,\n  getAssociatedTokenAddressSync,\n} from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { executeTransaction } from \"../../src\";\n\nexport const commandName = \"transferTokens\";\nexport const description = \"Add tokens to reward distributor\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  mint: new PublicKey(\"\"),\n  rewardDistributorId: new PublicKey(\"\"),\n  amount: 0,\n  decimals: 0,\n});\n\nexport const handler = async (\n  connection: Connection,\n  wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const { mint, rewardDistributorId, amount, decimals } = args;\n  const ownerAtaId = getAssociatedTokenAddressSync(\n    mint,\n    wallet.publicKey,\n    true\n  );\n\n  const transaction = new Transaction();\n  const rewardDistributorAtaId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mint,\n    rewardDistributorId,\n    wallet.publicKey,\n    true\n  );\n\n  transaction.add(\n    createTransferCheckedInstruction(\n      ownerAtaId,\n      mint,\n      rewardDistributorAtaId,\n      wallet.publicKey,\n      amount,\n      decimals\n    )\n  );\n\n  const txid = await executeTransaction(connection, wallet, transaction, {});\n  console.log(`[success] https://explorer.solana.com/tx/${txid}`);\n};\n"]}