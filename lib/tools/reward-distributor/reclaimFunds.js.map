{"version":3,"file":"reclaimFunds.js","sourceRoot":"","sources":["../../../tools/reward-distributor/reclaimFunds.ts"],"names":[],"mappings":";;;AAEA,6CAAyD;AACzD,iCAA2B;AAE3B,mCAA+C;AAC/C,kFAAoF;AAEvE,QAAA,WAAW,GAAG,cAAc,CAAC;AAC7B,QAAA,WAAW,GACtB,uDAAuD,CAAC;AAEnD,MAAM,OAAO,GAAG,CAAC,WAAuB,EAAE,OAAe,EAAE,EAAE,CAAC,CAAC;IACpE,4BAA4B;IAC5B,aAAa,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;IACxB,sCAAsC;IACtC,WAAW,EAAE,IAAI,mBAAS,CAAC,8CAA8C,CAAC;IAC1E,8BAA8B;IAC9B,yDAAyD;IACzD,MAAM,EAAE,IAAI,UAAE,CAAC,CAAC,CAAC;CAClB,CAAC,CAAC;AARU,QAAA,OAAO,WAQjB;AAEI,MAAM,OAAO,GAAG,KAAK,EAC1B,UAAsB,EACtB,MAAc,EACd,IAAgC,EAChC,EAAE;IACF,MAAM,WAAW,GAAG,MAAM,IAAA,8BAAgB,EACxC,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN;QACE,aAAa,EAAE,IAAI,CAAC,aAAa;QACjC,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;KACpB,CACF,CAAC;IACF,MAAM,IAAI,GAAG,MAAM,IAAA,wBAAkB,EAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC3E,OAAO,CAAC,GAAG,CAAC,4CAA4C,IAAI,EAAE,CAAC,CAAC;AAClE,CAAC,CAAC;AAjBW,QAAA,OAAO,WAiBlB","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { executeTransaction } from \"../../src\";\nimport { withReclaimFunds } from \"../../src/programs/rewardDistributor/transaction\";\n\nexport const commandName = \"reclaimFunds\";\nexport const description =\n  \"Reclaim funds from a stake pool as the pool authority\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  // rewards distributor index\n  distributorId: new BN(0),\n  // stake pool id to reclaim funds from\n  stakePoolId: new PublicKey(\"3BZCupFU6X3wYJwgTsKS2vTs4VeMrhSZgx4P2TfzExtP\"),\n  // amount of tokens to reclaim\n  // WARNING: natural amount must account for mint decimals\n  amount: new BN(0),\n});\n\nexport const handler = async (\n  connection: Connection,\n  wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const transaction = await withReclaimFunds(\n    new Transaction(),\n    connection,\n    wallet,\n    {\n      distributorId: args.distributorId,\n      stakePoolId: args.stakePoolId,\n      amount: args.amount,\n    }\n  );\n  const txid = await executeTransaction(connection, wallet, transaction, {});\n  console.log(`[success] https://explorer.solana.com/tx/${txid}`);\n};\n"]}