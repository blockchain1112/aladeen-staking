{"version":3,"file":"checkStakeEntryFunds.js","sourceRoot":"","sources":["../../../tools/stake-entries/checkStakeEntryFunds.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  decimalAmount,\n  getBatchedMultipleAccounts,\n  tryPublicKey,\n} from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor\";\nimport {\n  getAssociatedTokenAddressSync,\n  getMint,\n  unpackAccount,\n} from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getAllStakeEntriesForPool } from \"../../src/programs/stakePool/accounts\";\nimport { chunkArray } from \"../utils\";\n\nexport const commandName = \"checkStakeEntryFunds\";\nexport const description = \"Get all funds of a given mint in a given pool\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  poolIds: \"BeT8h9E5BcgcMBxF7Si5GSRuB6zHcSpFuMpp6uTcVRFN\",\n  mintId: new PublicKey(\"DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263\"),\n});\n\nexport const handler = async (\n  connection: Connection,\n  _wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const mint = await getMint(connection, args.mintId);\n  const poolIds = args.poolIds.split(\",\").map((pk) => tryPublicKey(pk));\n  for (let pi = 0; pi < poolIds.length; pi++) {\n    const poolId = poolIds[pi]!;\n    const stakeEntries = await getAllStakeEntriesForPool(connection, poolId);\n    console.log(`[stake-entries] (${stakeEntries.length})`);\n    const stakeEntryTokenAccountIds = stakeEntries.map((entry) =>\n      getAssociatedTokenAddressSync(args.mintId, entry.pubkey, true)\n    );\n    const chunkedIds = chunkArray(stakeEntryTokenAccountIds, 1000);\n    const stakeEntryTokenAccountInfos = [];\n    for (let i = 0; i < chunkedIds.length; i++) {\n      const chunkIds = chunkedIds[i]!;\n      console.log(\n        `[loading] ${stakeEntryTokenAccountInfos.length}/${stakeEntryTokenAccountIds.length} [${chunkIds.length}]`\n      );\n      const chunkStakeEntryTokenAccountInfos = await getBatchedMultipleAccounts(\n        connection,\n        chunkIds\n      );\n      stakeEntryTokenAccountInfos.push(...chunkStakeEntryTokenAccountInfos);\n      await new Promise((r) => setTimeout(r, 1000));\n    }\n    const stakeEntryTokenAccounts = stakeEntryTokenAccountInfos.map(\n      (tokenAccount, i) => {\n        const tokenAccountId = stakeEntryTokenAccountIds[i];\n        if (tokenAccount && tokenAccountId) {\n          return unpackAccount(tokenAccountId, tokenAccount);\n        }\n        return null;\n      }\n    );\n\n    const totalTokens = stakeEntryTokenAccounts.reduce(\n      (acc, tokenAccount) =>\n        tokenAccount ? new BN(tokenAccount?.amount.toString()).add(acc) : acc,\n      new BN(0)\n    );\n\n    const pools = {} as { [pid: string]: BN };\n    for (let i = 0; i < stakeEntries.length; i++) {\n      const stakeEntry = stakeEntries[i];\n      const stakeEntryTokenAccount = stakeEntryTokenAccounts[i];\n      if (stakeEntry && stakeEntryTokenAccount) {\n        const current = pools[stakeEntry.parsed.pool.toString()];\n        pools[stakeEntry.parsed.pool.toString()] = (current ?? new BN(0)).add(\n          new BN(stakeEntryTokenAccount.amount.toString())\n        );\n      }\n    }\n    console.log(`[total] ${decimalAmount(totalTokens, mint.decimals)}`);\n    console.log(`[breakdown] ${JSON.stringify(pools, null, 2)}`);\n  }\n};\n"]}