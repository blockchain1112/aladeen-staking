{"version":3,"file":"createFungibleToken.js","sourceRoot":"","sources":["../../../tools/token-creation/createFungibleToken.ts"],"names":[],"mappings":"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","sourcesContent":["import { findMintMetadataId } from \"@cardinal/common\";\nimport { utils } from \"@project-serum/anchor\";\nimport {\n  createAssociatedTokenAccountInstruction,\n  createInitializeMint2Instruction,\n  createMintToInstruction,\n  getAssociatedTokenAddressSync,\n  getMinimumBalanceForRentExemptMint,\n  MINT_SIZE,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Keypair,\n  sendAndConfirmRawTransaction,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { createCreateMetadataAccountV2Instruction } from \"mplx-v2\";\n\nimport { connectionFor } from \"../connection\";\n\nconst wallet = Keypair.fromSecretKey(\n  utils.bytes.bs58.decode(process.env.AIRDROP_KEY || \"\")\n);\n\nconst MINT_KEYPAIR = Keypair.fromSecretKey(\n  utils.bytes.bs58.decode(process.env.AIRDROP_KEY || \"\")\n);\n\nconst SUPPLY = 60_000_000_0000000;\nconst DECIMALS = 7;\n\nexport const createFungibleToken = async (\n  cluster = \"devnet\",\n  mintKeypair: Keypair\n) => {\n  const connection = connectionFor(cluster);\n  try {\n    const tokenAccountId = getAssociatedTokenAddressSync(\n      mintKeypair.publicKey,\n      wallet.publicKey\n    );\n    const metadataId = findMintMetadataId(mintKeypair.publicKey);\n\n    const transaction = new Transaction().add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: mintKeypair.publicKey,\n        space: MINT_SIZE,\n        lamports: await getMinimumBalanceForRentExemptMint(connection),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      createInitializeMint2Instruction(\n        mintKeypair.publicKey,\n        DECIMALS,\n        wallet.publicKey,\n        wallet.publicKey\n      ),\n      createAssociatedTokenAccountInstruction(\n        wallet.publicKey,\n        tokenAccountId,\n        wallet.publicKey,\n        mintKeypair.publicKey\n      ),\n      createMintToInstruction(\n        mintKeypair.publicKey,\n        tokenAccountId,\n        wallet.publicKey,\n        SUPPLY\n      ),\n      createCreateMetadataAccountV2Instruction(\n        {\n          metadata: metadataId,\n          mint: mintKeypair.publicKey,\n          updateAuthority: wallet.publicKey,\n          mintAuthority: wallet.publicKey,\n          payer: wallet.publicKey,\n        },\n        {\n          createMetadataAccountArgsV2: {\n            data: {\n              name: `name-${Math.random()}`,\n              symbol: \"SYMB\",\n              uri: `uri-${Math.random()}`,\n              sellerFeeBasisPoints: 0,\n              creators: [\n                { address: wallet.publicKey, share: 100, verified: true },\n              ],\n              collection: null,\n              uses: null,\n            },\n            isMutable: true,\n          },\n        }\n      )\n    );\n    transaction.feePayer = wallet.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash(\"max\")\n    ).blockhash;\n    transaction.sign(wallet, mintKeypair);\n    const txid = await sendAndConfirmRawTransaction(\n      connection,\n      transaction.serialize(),\n      {\n        commitment: \"confirmed\",\n      }\n    );\n    console.log(\n      `Token created mintId=(${mintKeypair.publicKey.toString()}) metadataId=(${metadataId.toString()}) tokenAccount=(${tokenAccountId.toString()}) with transaction https://explorer.solana.com/tx/${txid}?cluster=${cluster}`\n    );\n  } catch (e) {\n    console.log(\"Failed\", e);\n  }\n};\n\ncreateFungibleToken(\"mainnet\", MINT_KEYPAIR).catch((e) => {\n  console.log(e);\n});\n"]}