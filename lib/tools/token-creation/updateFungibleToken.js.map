{"version":3,"file":"updateFungibleToken.js","sourceRoot":"","sources":["../../../tools/token-creation/updateFungibleToken.ts"],"names":[],"mappings":";;;AAAA,gFAKiD;AACjD,kDAA8C;AAC9C,6CAKyB;AAEzB,8CAA8C;AAE9C,MAAM,MAAM,GAAG,iBAAO,CAAC,aAAa,CAClC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC,CACvD,CAAC;AAEF,MAAM,eAAe,GAAG,IAAI,mBAAS,CAAC,EAAE,CAAC,CAAC;AAEnC,MAAM,mBAAmB,GAAG,KAAK,EAAE,OAAO,GAAG,QAAQ,EAAE,EAAE;IAC9D,MAAM,UAAU,GAAG,IAAA,0BAAa,EAAC,OAAO,CAAC,CAAC;IAC1C,IAAI;QACF,MAAM,UAAU,GAAG,MAAM,6BAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,IAAI,qCAAgB,CACrC,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,EAC9B;YACE,QAAQ,EAAE,UAAU;YACpB,YAAY,EAAE,IAAI,2BAAM,CAAC;gBACvB,IAAI,EAAE,EAAE;gBACR,MAAM,EAAE,EAAE;gBACV,GAAG,EAAE,EAAE;gBACP,oBAAoB,EAAE,CAAC;gBACvB,QAAQ,EAAE;oBACR,IAAI,4BAAO,CAAC;wBACV,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;wBACpC,QAAQ,EAAE,IAAI;wBACd,KAAK,EAAE,GAAG;qBACX,CAAC;iBACH;gBACD,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,IAAI;aACX,CAAC;YACF,SAAS,EAAE,IAAI;YACf,kBAAkB,EAAE,MAAM,CAAC,SAAS;YACpC,mBAAmB,EAAE,KAAK;YAC1B,eAAe,EAAE,MAAM,CAAC,SAAS;SAClC,CACF,CAAC;QAEF,MAAM,WAAW,GAAG,IAAI,qBAAW,EAAE,CAAC;QACtC,WAAW,CAAC,YAAY,GAAG,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;QACxD,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;QACxC,WAAW,CAAC,eAAe,GAAG,CAC5B,MAAM,UAAU,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAC3C,CAAC,SAAS,CAAC;QACZ,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,MAAM,IAAI,GAAG,MAAM,IAAA,sCAA4B,EAC7C,UAAU,EACV,WAAW,CAAC,SAAS,EAAE,EACvB;YACE,UAAU,EAAE,WAAW;SACxB,CACF,CAAC;QACF,OAAO,CAAC,GAAG,CACT,yBAAyB,eAAe,CAAC,QAAQ,EAAE,iBAAiB,UAAU,CAAC,QAAQ,EAAE,qDAAqD,IAAI,YAAY,OAAO,EAAE,CACxK,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;KAC1B;AACH,CAAC,CAAC;AAlDW,QAAA,mBAAmB,uBAkD9B;AAEF,IAAA,2BAAmB,GAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;IAChC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC","sourcesContent":["import {\n  Creator,\n  DataV2,\n  Metadata,\n  UpdateMetadataV2,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport { utils } from \"@project-serum/anchor\";\nimport {\n  Keypair,\n  PublicKey,\n  sendAndConfirmRawTransaction,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport { connectionFor } from \"../connection\";\n\nconst wallet = Keypair.fromSecretKey(\n  utils.bytes.bs58.decode(process.env.AIRDROP_KEY || \"\")\n);\n\nconst MINT_PUBLIC_KEY = new PublicKey(\"\");\n\nexport const updateFungibleToken = async (cluster = \"devnet\") => {\n  const connection = connectionFor(cluster);\n  try {\n    const metadataId = await Metadata.getPDA(MINT_PUBLIC_KEY);\n    const metadataTx = new UpdateMetadataV2(\n      { feePayer: wallet.publicKey },\n      {\n        metadata: metadataId,\n        metadataData: new DataV2({\n          name: \"\",\n          symbol: \"\",\n          uri: \"\",\n          sellerFeeBasisPoints: 0,\n          creators: [\n            new Creator({\n              address: wallet.publicKey.toString(),\n              verified: true,\n              share: 100,\n            }),\n          ],\n          collection: null,\n          uses: null,\n        }),\n        isMutable: true,\n        newUpdateAuthority: wallet.publicKey,\n        primarySaleHappened: false,\n        updateAuthority: wallet.publicKey,\n      }\n    );\n\n    const transaction = new Transaction();\n    transaction.instructions = [...metadataTx.instructions];\n    transaction.feePayer = wallet.publicKey;\n    transaction.recentBlockhash = (\n      await connection.getRecentBlockhash(\"max\")\n    ).blockhash;\n    transaction.sign(wallet);\n    const txid = await sendAndConfirmRawTransaction(\n      connection,\n      transaction.serialize(),\n      {\n        commitment: \"confirmed\",\n      }\n    );\n    console.log(\n      `Token updated mintId=(${MINT_PUBLIC_KEY.toString()}) metadataId=(${metadataId.toString()}) with transaction https://explorer.solana.com/tx/${txid}?cluster=${cluster}`\n    );\n  } catch (e) {\n    console.log(\"Failed\", e);\n  }\n};\n\nupdateFungibleToken().catch((e) => {\n  console.log(e);\n});\n"]}