{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../tools/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import { Wallet } from \"@project-serum/anchor\";\nimport type { Cluster, Connection } from \"@solana/web3.js\";\nimport * as dotenv from \"dotenv\";\nimport * as readline from \"readline\";\nimport type { ArgumentsCamelCase, CommandModule } from \"yargs\";\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\n\nimport * as claimRewardsForUsers from \"./admin-actions/claimRewardsForUsers\";\nimport * as initializeEntriesAndSetMultipliers from \"./admin-actions/initializeEntriesAndSetMultipliers\";\nimport * as updateMultipliersOnRules from \"./admin-actions/updateMultipliersOnRules\";\nimport * as getAllStakePools from \"./analytics/getAllStakePools\";\nimport * as stakedTokensBreakdownByWallet from \"./analytics/stakedTokensBreakdownByWallet\";\nimport { connectionFor } from \"./connection\";\nimport * as reclaimFunds from \"./reward-distributor/reclaimFunds\";\nimport * as transferTokens from \"./reward-distributor/transferTokens\";\nimport * as checkStakeEntryFunds from \"./stake-entries/checkStakeEntryFunds\";\nimport { keypairFrom } from \"./utils\";\n\ndotenv.config();\n\nexport type ProviderParams = {\n  cluster: string;\n  wallet: string;\n};\n\nconst commandBuilder = <T>(command: {\n  commandName: string;\n  description: string;\n  getArgs: (c: Connection, w: Wallet) => T;\n  handler: (c: Connection, w: Wallet, a: T) => Promise<void>;\n}): CommandModule<ProviderParams, ProviderParams> => {\n  return {\n    command: command.commandName,\n    describe: command.description,\n    handler: async ({\n      cluster,\n      wallet,\n    }: ArgumentsCamelCase<ProviderParams>) => {\n      const clusterString = process.env.CLUSTER || cluster;\n      const c = connectionFor(clusterString as Cluster);\n      const w = new Wallet(keypairFrom(process.env.WALLET || wallet, \"wallet\"));\n      const a = command.getArgs(c, w);\n      console.log(command.description);\n      console.log(\n        `[cluster=${clusterString}] [wallet=${w.publicKey.toString()}]`\n      );\n      console.log(`\\n(modify args in ${command.commandName}.ts)`);\n      console.log(JSON.stringify(a, null, 2));\n      await question(\"\\nExecute... [enter]\");\n      await command.handler(c, w, a);\n    },\n  };\n};\n\nexport const question = async (query: string) => {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  return new Promise((resolve) =>\n    rl.question(query, (ans) => {\n      rl.close();\n      resolve(ans);\n    })\n  );\n};\n\nvoid yargs(hideBin(process.argv))\n  .positional(\"wallet\", {\n    describe: \"Wallet to use - default to WALLET environment variable\",\n    default: \"~/.config/solana/id.json\",\n  })\n  .positional(\"cluster\", {\n    describe:\n      \"Solana cluster moniker to use [mainnet, devnet] - ovverride url with RPC_URL environment variable or mainnet moniker with MAINNET_PRIMARY environment variable\",\n    default: \"devnet\",\n  })\n  // analytics\n  .command(commandBuilder(stakedTokensBreakdownByWallet))\n  .command(commandBuilder(getAllStakePools))\n  // admin-actions\n  .command(commandBuilder(updateMultipliersOnRules))\n  .command(commandBuilder(initializeEntriesAndSetMultipliers))\n  .command(commandBuilder(claimRewardsForUsers))\n  // reward-distributor\n  .command(commandBuilder(reclaimFunds))\n  .command(commandBuilder(transferTokens))\n  // stake-entries\n  .command(commandBuilder(checkStakeEntryFunds))\n  .strict()\n  .demandCommand()\n  .alias({ h: \"help\" }).argv;\n"]}