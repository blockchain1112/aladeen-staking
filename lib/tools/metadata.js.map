{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../tools/metadata.ts"],"names":[],"mappings":";;;;AAAA,6CAG0B;AAE1B,qCAAmC;AACnC,oEAA+B;AAaxB,MAAM,aAAa,GAAG,KAAK,EAChC,UAAsB,EACtB,OAAoB,EAGpB,EAAE;IACF,OAAO,CAAC,GAAG,CAAC,oBAAoB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnD,OAAO,CAAC,GAAG,CAAC,oBAAoB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,2BAAkB,EAAC,IAAI,CAAC,CAAC,CAAC;IACpE,MAAM,oBAAoB,GAAG,MAAM,IAAA,mCAA0B,EAC3D,UAAU,EACV,WAAW,CACZ,CAAC;IACF,MAAM,YAAY,GAAG,oBAAoB,CAAC,MAAM,CAC9C,CAAC,GAAG,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE;QACtB,IAAI;YACF,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,EAAE;gBACrB,MAAM,gBAAgB,GAAG,kBAAQ,CAAC,WAAW,CAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAE,CAAC,QAAQ,EAAE,CAAC,GAAG;oBAC5B,MAAM,EAAE,WAAW,CAAC,CAAC,CAAE;oBACvB,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,GAAG;iBAC/B,CAAC;aACH;SACF;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;SAClD;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EACD,EAKC,CACF,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,yBAAyB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACxD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAChC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACvC,IAAA,oBAAK,EAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAiB,CAAC,CACxE,CACF,CAAC;IACF,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;AAClC,CAAC,CAAC;AA3CW,QAAA,aAAa,iBA2CxB","sourcesContent":["import {\n  findMintMetadataId,\n  getBatchedMultipleAccounts,\n} from \"@cardinal/common\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Metadata } from \"mplx-v2\";\nimport fetch from \"node-fetch\";\n\nexport type MetadataJSON = {\n  name: string;\n  symbol: string;\n  description: string;\n  seller_fee_basis_points: number;\n  image: string;\n  external_url: string;\n  edition: number;\n  attributes: { trait_type: string; value: string }[];\n};\n\nexport const fetchMetadata = async (\n  connection: Connection,\n  mintIds: PublicKey[]\n): Promise<\n  [MetadataJSON[], { [mintId: string]: { pubkey: PublicKey; uri: string } }]\n> => {\n  console.log(`> fetchMetadata (${mintIds.length})`);\n  console.log(`>> metaplexData (${mintIds.length})`);\n  const metaplexIds = mintIds.map((mint) => findMintMetadataId(mint));\n  const metaplexAccountInfos = await getBatchedMultipleAccounts(\n    connection,\n    metaplexIds\n  );\n  const metaplexData = metaplexAccountInfos.reduce(\n    (acc, accountInfo, i) => {\n      try {\n        if (accountInfo?.data) {\n          const metaplexMintData = Metadata.deserialize(accountInfo?.data)[0];\n          acc[mintIds[i]!.toString()] = {\n            pubkey: metaplexIds[i]!,\n            uri: metaplexMintData.data.uri,\n          };\n        }\n      } catch (e) {\n        console.log(\"Error desirializing metaplex data\");\n      }\n      return acc;\n    },\n    {} as {\n      [mintId: string]: {\n        pubkey: PublicKey;\n        uri: string;\n      };\n    }\n  );\n\n  console.log(`>> offChain metadata (${mintIds.length})`);\n  const metadata = await Promise.all(\n    Object.values(metaplexData).map((data) =>\n      fetch(data.uri).then(async (res) => (await res.json()) as MetadataJSON)\n    )\n  );\n  return [metadata, metaplexData];\n};\n"]}