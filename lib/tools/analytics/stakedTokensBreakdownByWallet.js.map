{"version":3,"file":"stakedTokensBreakdownByWallet.js","sourceRoot":"","sources":["../../../tools/analytics/stakedTokensBreakdownByWallet.ts"],"names":[],"mappings":";;;AAEA,6CAA4C;AAC5C,iCAA2B;AAE3B,oEAAqF;AAExE,QAAA,WAAW,GAAG,+BAA+B,CAAC;AAC9C,QAAA,WAAW,GACtB,0DAA0D,CAAC;AAEtD,MAAM,OAAO,GAAG,CAAC,WAAuB,EAAE,OAAe,EAAE,EAAE,CAAC,CAAC;IACpE,MAAM,EAAE,IAAI,mBAAS,CAAC,8CAA8C,CAAC;CACtE,CAAC,CAAC;AAFU,QAAA,OAAO,WAEjB;AAEI,MAAM,OAAO,GAAG,KAAK,EAC1B,UAAsB,EACtB,OAAe,EACf,IAAgC,EAChC,EAAE;IACF,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACjC,MAAM,YAAY,GAAG,MAAM,IAAA,uCAA4B,EACrD,UAAU,EACV,IAAI,CAAC,MAAM,CACZ,CAAC;IACF,MAAM,OAAO,GAAG,YAAY,CAAC,MAAM,CACjC,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE;;QAClB,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QACvD,MAAM,YAAY,GAAG;YACnB,MAAM;YACN,gBAAgB,EAAE,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE;YACrD,iBAAiB,EAAE,UAAU,CAAC,MAAM,CAAC,iBAAiB;iBACnD,GAAG,CACF,IAAI,UAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAChB,MAAA,UAAU,CAAC,MAAM,CAAC,aAAa,mCAAI,UAAU,CAAC,MAAM,CAAC,YAAY,CAClE,CACF;iBACA,QAAQ,EAAE;SACd,CAAC;QACF,MAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,aAAa,EAAE;YACjB,GAAG,CAAC,MAAM,CAAC,GAAG;gBACZ,MAAM;gBACN,gBAAgB,EACd,aAAa,CAAC,gBAAgB,GAAG,YAAY,CAAC,gBAAgB;gBAChE,iBAAiB,EACf,aAAa,CAAC,iBAAiB,GAAG,YAAY,CAAC,iBAAiB;aACnE,CAAC;SACH;aAAM;YACL,GAAG,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC;SAC5B;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EACD,EAMC,CACF,CAAC;IAEF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC/C,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CACpD,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC7B,CAAC,CAAC;AAnDW,QAAA,OAAO,WAmDlB","sourcesContent":["import type { Wallet } from \"@project-serum/anchor\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { getActiveStakeEntriesForPool } from \"../../src/programs/stakePool/accounts\";\n\nexport const commandName = \"stakedTokensBreakdownByWallet\";\nexport const description =\n  \"Get a breakdown of all staked tokens in a pool by wallet\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  poolId: new PublicKey(\"3BZCupFU6X3wYJwgTsKS2vTs4VeMrhSZgx4P2TfzExtP\"),\n});\n\nexport const handler = async (\n  connection: Connection,\n  _wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const UTCNow = Date.now() / 1000;\n  const stakeEntries = await getActiveStakeEntriesForPool(\n    connection,\n    args.poolId\n  );\n  const results = stakeEntries.reduce(\n    (acc, stakeEntry) => {\n      const wallet = stakeEntry.parsed.lastStaker.toString();\n      const currentEntry = {\n        wallet,\n        totalStakeAmount: stakeEntry.parsed.amount.toNumber(),\n        totalStakeSeconds: stakeEntry.parsed.totalStakeSeconds\n          .add(\n            new BN(UTCNow).sub(\n              stakeEntry.parsed.lastUpdatedAt ?? stakeEntry.parsed.lastStakedAt\n            )\n          )\n          .toNumber(),\n      };\n      const existingEntry = acc[wallet];\n      if (existingEntry) {\n        acc[wallet] = {\n          wallet,\n          totalStakeAmount:\n            existingEntry.totalStakeAmount + currentEntry.totalStakeAmount,\n          totalStakeSeconds:\n            existingEntry.totalStakeSeconds + currentEntry.totalStakeSeconds,\n        };\n      } else {\n        acc[wallet] = currentEntry;\n      }\n      return acc;\n    },\n    {} as {\n      [wallet: string]: {\n        wallet: string;\n        totalStakeAmount: number;\n        totalStakeSeconds: number;\n      };\n    }\n  );\n\n  const sortedResults = Object.values(results).sort(\n    (a, b) => b.totalStakeSeconds - a.totalStakeSeconds\n  );\n  console.log(sortedResults);\n};\n"]}