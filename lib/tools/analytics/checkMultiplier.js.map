{"version":3,"file":"checkMultiplier.js","sourceRoot":"","sources":["../../../tools/analytics/checkMultiplier.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { utils, Wallet } from \"@project-serum/anchor\";\nimport { Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\nimport * as dotenv from \"dotenv\";\n\nimport { executeTransaction } from \"../../src\";\nimport type { RewardEntryData } from \"../../src/programs/rewardDistributor\";\nimport {\n  getRewardDistributor,\n  getRewardEntriesForRewardDistributor,\n} from \"../../src/programs/rewardDistributor/accounts\";\nimport { withUpdateRewardEntry } from \"../../src/programs/rewardDistributor/transaction\";\nimport { connectionFor } from \"../connection\";\nimport { chunkArray } from \"../utils\";\n\ndotenv.config();\n\nconst MULTIPLIER = 100;\nconst BATCH_SIZE = 1;\n\nconst wallet = Keypair.fromSecretKey(\n  utils.bytes.bs58.decode(process.env.TOOLS_WALLET ?? \"\")\n);\n\nconst checkMultipliers = async (\n  rewardDistributorId: PublicKey,\n  cluster: string\n) => {\n  const connection = connectionFor(cluster);\n  const rewardEntries = await getRewardEntriesForRewardDistributor(\n    connection,\n    rewardDistributorId\n  );\n  const rewardDistributorData = await getRewardDistributor(\n    connection,\n    rewardDistributorId\n  );\n  console.log(`--------- Found ${rewardEntries.length} entries ---------`);\n  const missingMultipliers: AccountData<RewardEntryData>[] = [];\n  rewardEntries.forEach((entry) => {\n    if (!entry.parsed.multiplier.eq(new BN(100))) {\n      missingMultipliers.push(entry);\n    }\n  });\n  console.log(`Found ${missingMultipliers.length} entries with multipler=1`);\n  console.log(missingMultipliers);\n  const chunks = chunkArray(missingMultipliers, BATCH_SIZE);\n\n  for (let i = 0; i < chunks.length; i++) {\n    const chunk = chunks[i]!;\n    const transaction = new Transaction();\n    const entriesInTx: AccountData<RewardEntryData>[] = [];\n    for (let j = 0; j < chunk.length; j++) {\n      const m = chunk[j]!;\n      console.log(m);\n      console.log(`\\n\\n${i}. Reward entry: ${m.pubkey.toString()}`);\n      withUpdateRewardEntry(transaction, connection, new Wallet(wallet), {\n        stakePoolId: rewardDistributorData.parsed.stakePool,\n        rewardDistributorId: rewardDistributorId,\n        stakeEntryId: m.parsed.stakeEntry,\n        multiplier: new BN(MULTIPLIER),\n      });\n      entriesInTx.push(m);\n    }\n    try {\n      const txid = await executeTransaction(\n        connection,\n        new Wallet(wallet),\n        transaction,\n        {}\n      );\n      console.log(\n        `Succesfully migrated entries [${entriesInTx\n          .map((e) => e.pubkey.toString())\n          .join()}] with transaction ${txid} (https://explorer.solana.com/tx/${txid}?cluster=${cluster})`\n      );\n    } catch (e) {\n      console.log(e);\n    }\n    console.log(entriesInTx);\n  }\n};\n\ncheckMultipliers(\n  new PublicKey(\"7CgYMgEhXFLeNfS66VLo93PCTNDjtK6BEq9Wmp6yGJ5T\"),\n  \"mainnet\"\n).catch((e) => console.log(e));\n"]}