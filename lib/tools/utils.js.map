{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../tools/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport { fetchIdlAccountNullable } from \"@cardinal/rewards-center\";\nimport { utils } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type {\n  Connection,\n  SendTransactionError,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {\n  Keypair,\n  PublicKey,\n  sendAndConfirmRawTransaction,\n} from \"@solana/web3.js\";\nimport * as dotenv from \"dotenv\";\n\nimport { getStakePool } from \"../src/programs/stakePool/accounts\";\n\ndotenv.config();\n\nexport type StakePoolKind = \"v1\" | \"v2\" | \"unknown\";\n\nexport const stakePoolKind = async (\n  connection: Connection,\n  stakePoolAddress: PublicKey\n): Promise<StakePoolKind> => {\n  const checkStakePooolV1 = await tryGetAccount(() =>\n    getStakePool(connection, stakePoolAddress)\n  );\n  if (checkStakePooolV1) return \"v1\";\n\n  const checkStakePoolV2 = await fetchIdlAccountNullable(\n    connection,\n    stakePoolAddress,\n    \"stakePool\"\n  );\n  if (checkStakePoolV2) return \"v2\";\n\n  return \"unknown\";\n};\n\nexport function chunkArray<T>(arr: T[], size: number): T[][] {\n  return arr.length > size\n    ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)]\n    : [arr];\n}\n\nexport const keypairFrom = (s: string, n?: string): Keypair => {\n  try {\n    if (s.includes(\"[\")) {\n      return Keypair.fromSecretKey(\n        Buffer.from(\n          s\n            .replace(\"[\", \"\")\n            .replace(\"]\", \"\")\n            .split(\",\")\n            .map((c) => parseInt(c))\n        )\n      );\n    } else {\n      return Keypair.fromSecretKey(utils.bytes.bs58.decode(s));\n    }\n  } catch (e) {\n    try {\n      return Keypair.fromSecretKey(\n        Buffer.from(\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          JSON.parse(\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-var-requires\n            require(\"fs\").readFileSync(s, {\n              encoding: \"utf-8\",\n            })\n          )\n        )\n      );\n    } catch (e) {\n      process.stdout.write(`${n ?? \"keypair\"} is not valid keypair`);\n      process.exit(1);\n    }\n  }\n};\n\nexport const publicKeyFrom = (s: string, n?: string): PublicKey => {\n  try {\n    return new PublicKey(s);\n  } catch (e) {\n    process.stdout.write(`${n ?? \"publicKey\"} is not valid publicKey`);\n    process.exit(1);\n  }\n};\n\nexport async function executeTransaction(\n  connection: Connection,\n  tx: Transaction,\n  wallet: Wallet,\n  config?: { signers?: Signer[]; silent?: boolean }\n): Promise<string> {\n  tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  tx.feePayer = wallet.publicKey;\n  await wallet.signTransaction(tx);\n  if (config?.signers) {\n    tx.partialSign(...(config?.signers ?? []));\n  }\n  try {\n    const txid = await sendAndConfirmRawTransaction(connection, tx.serialize());\n    return txid;\n  } catch (e) {\n    if (!config?.silent) {\n      handleError(e);\n    }\n    throw e;\n  }\n}\n\nexport async function executeTransactions(\n  connection: Connection,\n  txs: Transaction[],\n  wallet: Wallet,\n  config?: { signers?: Signer[]; silent?: boolean }\n): Promise<string[]> {\n  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const signedTxs = await wallet.signAllTransactions(\n    txs.map((tx) => {\n      tx.recentBlockhash = latestBlockhash;\n      tx.feePayer = wallet.publicKey;\n      if (config?.signers) {\n        tx.partialSign(...(config?.signers ?? []));\n      }\n      return tx;\n    })\n  );\n  const txids = await Promise.all(\n    signedTxs.map(async (tx) => {\n      try {\n        const txid = await sendAndConfirmRawTransaction(\n          connection,\n          tx.serialize()\n        );\n        return txid;\n      } catch (e) {\n        if (!config?.silent) {\n          handleError(e);\n        }\n        throw e;\n      }\n    })\n  );\n  return txids;\n}\n\nexport const handleError = (e: any) => {\n  const message = (e as SendTransactionError).message ?? \"\";\n  const logs = (e as SendTransactionError).logs;\n  if (logs) {\n    console.log(logs, message);\n  } else {\n    console.log(e, message);\n  }\n};\n"]}