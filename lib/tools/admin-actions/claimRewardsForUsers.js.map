{"version":3,"file":"claimRewardsForUsers.js","sourceRoot":"","sources":["../../../tools/admin-actions/claimRewardsForUsers.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { executeTransaction } from \"../../src\";\nimport { getRewardDistributor } from \"../../src/programs/rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../../src/programs/rewardDistributor/pda\";\nimport { withClaimRewards } from \"../../src/programs/rewardDistributor/transaction\";\nimport { getActiveStakeEntriesForPool } from \"../../src/programs/stakePool/accounts\";\nimport { withUpdateTotalStakeSeconds } from \"../../src/programs/stakePool/transaction\";\nimport { chunkArray } from \"../utils\";\n\nexport const commandName = \"claimRewardsForUsers\";\nexport const description =\n  \"Claim all rewards for users in the given pool (must be pool authority) - Cost 0.002 per token\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  // rewards distributor index\n  distributorId: new BN(0),\n  // stake pool id\n  stakePoolId: new PublicKey(\"3BZCupFU6X3wYJwgTsKS2vTs4VeMrhSZgx4P2TfzExtP\"),\n  // number of entries per transaction\n  batchSize: 4,\n  // number of transactions in parallel\n  parallelTransactions: 5,\n});\n\nexport const handler = async (\n  connection: Connection,\n  wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const { stakePoolId, distributorId } = args;\n  const rewardDistributorId = findRewardDistributorId(\n    stakePoolId,\n    distributorId\n  );\n  const checkRewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n  if (!checkRewardDistributorData) {\n    throw \"No reward distributor found\";\n  }\n\n  const activeStakeEntries = await getActiveStakeEntriesForPool(\n    connection,\n    stakePoolId\n  );\n  console.log(\n    `Estimated SOL needed to claim rewards for ${activeStakeEntries.length} staked tokens:`,\n    0.002 * activeStakeEntries.length,\n    \"SOL\"\n  );\n\n  const chunkedEntries = chunkArray(activeStakeEntries, args.batchSize);\n  const batchedChunks = chunkArray(chunkedEntries, args.parallelTransactions);\n  for (let i = 0; i < batchedChunks.length; i++) {\n    const chunk = batchedChunks[i]!;\n    console.log(`> ${i + 1}/ ${batchedChunks.length}`);\n    await Promise.all(\n      chunk.map(async (entries, index) => {\n        const transaction = new Transaction();\n        for (let j = 0; j < entries.length; j++) {\n          console.log(`>> ${j + 1}/ ${entries.length}`);\n          const stakeEntryData = entries[j]!;\n          withUpdateTotalStakeSeconds(transaction, connection, wallet, {\n            stakeEntryId: stakeEntryData.pubkey,\n            lastStaker: wallet.publicKey,\n          });\n          await withClaimRewards(transaction, connection, wallet, {\n            distributorId,\n            stakePoolId: stakePoolId,\n            stakeEntryId: stakeEntryData.pubkey,\n            lastStaker: stakeEntryData.parsed.lastStaker,\n            payer: wallet.publicKey,\n          });\n        }\n        try {\n          if (transaction.instructions.length > 0) {\n            const txid = await executeTransaction(\n              connection,\n              wallet,\n              transaction,\n              {}\n            );\n            console.log(\n              `[${index + 1}/${\n                chunk.length\n              }] [success] Claimed rewards (https://explorer.solana.com/tx/${txid})`\n            );\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      })\n    );\n  }\n\n  console.log(\n    `[success] Claimed rewards for ${activeStakeEntries.length} staked tokens`\n  );\n};\n"]}