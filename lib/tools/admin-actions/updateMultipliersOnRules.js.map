{"version":3,"file":"updateMultipliersOnRules.js","sourceRoot":"","sources":["../../../tools/admin-actions/updateMultipliersOnRules.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryGetAccount } from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { executeTransaction } from \"../../src\";\nimport {\n  getRewardDistributor,\n  getRewardEntries,\n} from \"../../src/programs/rewardDistributor/accounts\";\nimport {\n  findRewardDistributorId,\n  findRewardEntryId,\n} from \"../../src/programs/rewardDistributor/pda\";\nimport {\n  withInitRewardEntry,\n  withUpdateRewardEntry,\n} from \"../../src/programs/rewardDistributor/transaction\";\nimport {\n  getActiveStakeEntriesForPool,\n  getStakeEntries,\n} from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryId } from \"../../src/programs/stakePool/pda\";\nimport { fetchMetadata } from \"../metadata\";\n\nexport const commandName = \"updateMultipliersOnRules\";\nexport const description = `Update reward multipliers for mints based on traits or other rules. (must be pool authority)\nRules options:\n  volume - (if user stakes 2+ token, set token multpliers to 'X', if user staked 5+ token, set token multiplier to 'Y')\n  metadata - (if token has metadata attribute equal to specify value, set 'X' multiplier)\n  combination - (if user has to stake A,B,C mints together, token get 'X' multiplier, else set to zero)`;\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  distributorId: new BN(0),\n  stakePoolId: new PublicKey(\"3BZCupFU6X3wYJwgTsKS2vTs4VeMrhSZgx4P2TfzExtP\"),\n  updateRules: [\n    // {\n    //   volume: [\n    //     { volumeUpperBound: 1, multiplier: 1 },\n    //     { volumeUpperBound: 4, multiplier: 3 },\n    //     { volumeUpperBound: 7, multiplier: 6 },\n    //     { volumeUpperBound: 9, multiplier: 7 },\n    //     { volumeUpperBound: 15, multiplier: 10 },\n    //     { volumeUpperBound: 29, multiplier: 20 },\n    //     { volumeUpperBound: 39, multiplier: 25 },\n    //     { volumeUpperBound: 40, multiplier: 30 },\n    //   ],\n    // },\n    // {\n    // metadata: [{ traitType: \"some_trait\", value: \"value\", multiplier: 2 }],\n    // },\n  ] as UpdateRule[],\n  batchSize: 5,\n});\n\nexport type UpdateRule = {\n  volume?: { volumeUpperBound: number; multiplier: number }[];\n  metadata?: { traitType: string; value: string; multiplier: number }[];\n  combination?: {\n    primaryMint: PublicKey[];\n    secondaryMints: PublicKey[];\n    multiplier: number;\n  };\n};\n\nexport const handler = async (\n  connection: Connection,\n  wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const { stakePoolId, updateRules, batchSize, distributorId } = args;\n  const activeStakeEntries = await getActiveStakeEntriesForPool(\n    connection,\n    stakePoolId\n  );\n\n  for (const rule of updateRules) {\n    let dataToSubmit: { mint: PublicKey; multiplier: number }[] = [];\n\n    //////////////////////// metadata ////////////////////////\n    if (rule.metadata) {\n      console.log(\"Fetching metadata...\");\n      const [metadata] = await fetchMetadata(\n        connection,\n        activeStakeEntries.map((entry) => entry.parsed.originalMint)\n      );\n      console.log(\"Constructing multipliers...\");\n      const metadataLogs: { [multiplier: number]: PublicKey[] } = {};\n      for (let index = 0; index < metadata.length; index++) {\n        const md = metadata[index]!;\n        for (const mdRule of rule.metadata) {\n          if (\n            md.attributes.find(\n              (attr) =>\n                attr.trait_type === mdRule.traitType &&\n                attr.value === mdRule.value\n            )\n          ) {\n            if (metadataLogs[mdRule.multiplier]) {\n              metadataLogs[mdRule.multiplier]!.push(\n                activeStakeEntries[index]!.pubkey\n              );\n            } else {\n              metadataLogs[mdRule.multiplier] = [\n                activeStakeEntries[index]!.pubkey,\n              ];\n            }\n          }\n        }\n      }\n\n      // Update multiplier of mints\n      for (const [multiplierToSet, entries] of Object.entries(metadataLogs)) {\n        if (entries.length > 0) {\n          for (let index = 0; index < entries.length; index++) {\n            const entry = entries[index]!;\n            dataToSubmit.push({\n              mint: entry,\n              multiplier: Number(multiplierToSet),\n            });\n            if (\n              dataToSubmit.length > batchSize ||\n              index === entries.length - 1\n            ) {\n              await updateMultipliers(\n                connection,\n                wallet,\n                distributorId,\n                stakePoolId,\n                dataToSubmit.map((entry) => entry.mint),\n                dataToSubmit.map((entry) => entry.multiplier)\n              );\n              dataToSubmit = [];\n            }\n          }\n        }\n      }\n    } else if (rule.volume) {\n      //////////////////////// volume ////////////////////////\n      const volumeLogs: { [user: string]: PublicKey[] } = {};\n      for (const entry of activeStakeEntries) {\n        const user = entry.parsed.lastStaker.toString();\n        if (volumeLogs[user]) {\n          volumeLogs[user]!.push(entry.pubkey);\n        } else {\n          volumeLogs[user] = [entry.pubkey];\n        }\n      }\n      for (const [_, entries] of Object.entries(volumeLogs)) {\n        if (entries.length > 0) {\n          // find multiplier for volume\n          const volume = entries.length;\n          let multiplierToSet = 1;\n          for (const volumeRule of rule.volume) {\n            multiplierToSet = volumeRule.multiplier;\n            if (volume <= volumeRule.volumeUpperBound) {\n              break;\n            }\n          }\n\n          // Update multiplier of mints\n          for (const entry of entries) {\n            dataToSubmit.push({\n              mint: entry,\n              multiplier: multiplierToSet,\n            });\n            if (dataToSubmit.length > batchSize) {\n              await updateMultipliers(\n                connection,\n                wallet,\n                distributorId,\n                stakePoolId,\n                dataToSubmit.map((entry) => entry.mint),\n                dataToSubmit.map((entry) => entry.multiplier)\n              );\n              dataToSubmit = [];\n            }\n          }\n        }\n      }\n    } else if (rule.combination) {\n      //////////////////////// combinations ////////////////////////\n      const primaryMints = rule.combination.primaryMint;\n      const secondaryMints = rule.combination.secondaryMints;\n      const combinationLogs: { [user: string]: string[] } = {};\n\n      for (const entry of activeStakeEntries) {\n        const user = entry.parsed.lastStaker.toString();\n        if (combinationLogs[user]) {\n          combinationLogs[user]!.push(entry.pubkey.toString());\n        } else {\n          combinationLogs[user] = [entry.pubkey.toString()];\n        }\n      }\n      for (const [_, entries] of Object.entries(combinationLogs)) {\n        let multiplierToSet = 0;\n        let validCombination = true;\n        // Calculate if multiplier for primary mints\n        for (const mint of primaryMints) {\n          if (!entries.includes(mint.toString())) {\n            validCombination = false;\n            break;\n          }\n        }\n        for (const mint of secondaryMints) {\n          if (!entries.includes(mint.toString()) || !validCombination) {\n            validCombination = false;\n            break;\n          }\n        }\n\n        if (validCombination) {\n          multiplierToSet = rule.combination.multiplier;\n        }\n\n        // Update multiplier of primary mints\n        for (const primaryMint of primaryMints) {\n          const stakeEntryId = findStakeEntryId(\n            wallet.publicKey,\n            stakePoolId,\n            primaryMint,\n            false\n          );\n          dataToSubmit.push({\n            mint: stakeEntryId,\n            multiplier: multiplierToSet,\n          });\n          if (dataToSubmit.length > batchSize) {\n            await updateMultipliers(\n              connection,\n              wallet,\n              distributorId,\n              stakePoolId,\n              dataToSubmit.map((entry) => entry.mint),\n              dataToSubmit.map((entry) => entry.multiplier)\n            );\n            dataToSubmit = [];\n          }\n        }\n      }\n    }\n  }\n};\n\nconst updateMultipliers = async (\n  connection: Connection,\n  wallet: Wallet,\n  distributorId: BN,\n  stakePoolId: PublicKey,\n  stakeEntryIds: PublicKey[],\n  multipliers: number[]\n): Promise<void> => {\n  const transaction = new Transaction();\n  // update multipliers\n  const rewardDistributorId = findRewardDistributorId(\n    stakePoolId,\n    distributorId\n  );\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n  if (!rewardDistributorData) {\n    console.log(\"No reward distributor found\");\n    return;\n  }\n\n  const multipliersToSet = multipliers.map(\n    (ml) => ml * 10 ** rewardDistributorData.parsed.multiplierDecimals\n  );\n\n  const rewardEntryIds = stakeEntryIds.map((stakeEntryId) =>\n    findRewardEntryId(rewardDistributorId, stakeEntryId)\n  );\n  const stakeEntryDatas = await getStakeEntries(connection, stakeEntryIds);\n  const rewardEntryDatas = await getRewardEntries(connection, rewardEntryIds);\n  // Add init reward entry instructions\n  await Promise.all(\n    rewardEntryDatas.map((rewardEntryData, index) => {\n      if (!rewardEntryData.parsed) {\n        const stakeEntryId = stakeEntryIds[index]!;\n        return withInitRewardEntry(transaction, connection, wallet, {\n          stakeEntryId: stakeEntryId,\n          rewardDistributorId: rewardDistributorId,\n        });\n      }\n    })\n  );\n\n  // Add update instruction if needed\n  await Promise.all(\n    rewardEntryDatas.map((rewardEntryData, index) => {\n      const multiplierToSet = multipliersToSet[index]!;\n      const stakeEntryId = stakeEntryIds[index]!;\n      if (\n        !rewardEntryData.parsed ||\n        (rewardEntryData.parsed &&\n          rewardEntryData.parsed.multiplier.toNumber() !== multiplierToSet)\n      ) {\n        console.log(\n          `Updating multiplier for mint ${stakeEntryDatas[\n            index\n          ]!.parsed.originalMint.toString()} from ${\n            rewardEntryData.parsed\n              ? rewardEntryData.parsed.multiplier.toString()\n              : \"100\"\n          } to ${multiplierToSet}`\n        );\n        return withUpdateRewardEntry(transaction, connection, wallet, {\n          stakePoolId: stakePoolId,\n          rewardDistributorId: rewardDistributorId,\n          stakeEntryId: stakeEntryId,\n          multiplier: new BN(multiplierToSet),\n        });\n      }\n    })\n  );\n\n  // Execute transaction\n  if (transaction.instructions.length > 0) {\n    const txId = await executeTransaction(connection, wallet, transaction, {});\n    console.log(`Successfully executed transaction ${txId}\\n`);\n  } else {\n    console.log(\"No instructions provided\\n\");\n  }\n};\n"]}