{"version":3,"file":"initializeEntriesAndSetMultipliers.js","sourceRoot":"","sources":["../../../tools/admin-actions/initializeEntriesAndSetMultipliers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { executeTransaction } from \"../../src\";\nimport type { RewardEntryData } from \"../../src/programs/rewardDistributor\";\nimport {\n  getRewardDistributor,\n  getRewardEntries,\n} from \"../../src/programs/rewardDistributor/accounts\";\nimport {\n  findRewardDistributorId,\n  findRewardEntryId,\n} from \"../../src/programs/rewardDistributor/pda\";\nimport {\n  withInitRewardEntry,\n  withUpdateRewardEntry,\n} from \"../../src/programs/rewardDistributor/transaction\";\nimport type { StakeEntryData } from \"../../src/programs/stakePool\";\nimport { getStakeEntries } from \"../../src/programs/stakePool/accounts\";\nimport { findStakeEntryId } from \"../../src/programs/stakePool/pda\";\nimport { withInitStakeEntry } from \"../../src/programs/stakePool/transaction\";\nimport type { MetadataJSON } from \"../metadata\";\nimport { fetchMetadata } from \"../metadata\";\nimport { chunkArray } from \"../utils\";\nimport type { UpdateRule } from \"./updateMultipliersOnRules\";\n\nexport const commandName = \"initializeEntriesAndSetMultipliers\";\nexport const description =\n  \"Initialize all entries and optionally set multipliers for reward entries. Optionalls use metadataRules for complex multiplier rules\";\n\nexport const getArgs = (_connection: Connection, _wallet: Wallet) => ({\n  // rewards distributor index\n  distributorId: new BN(0),\n  // stake pool id\n  stakePoolId: new PublicKey(\"3BZCupFU6X3wYJwgTsKS2vTs4VeMrhSZgx4P2TfzExtP\"),\n  // whether this pool deals with fungible tokens\n  fungible: false,\n  // array of mints and optionally multiplier to initialize\n  // REMINDER: Take into account rewardDistributor.multiplierDecimals!\n  initEntries: [] as EntryData[],\n  // optional update rules\n  metadataRules: undefined as UpdateRule[\"metadata\"],\n  // number of entries per transaction\n  batchSize: 3,\n  // number of transactions in parallel\n  parallelBatchSize: 20,\n});\n\ntype EntryData = { mintId: PublicKey; multiplier?: number };\n\nexport const handler = async (\n  connection: Connection,\n  wallet: Wallet,\n  args: ReturnType<typeof getArgs>\n) => {\n  const { stakePoolId, initEntries, metadataRules, distributorId } = args;\n  const rewardDistributorId = findRewardDistributorId(\n    stakePoolId,\n    distributorId\n  );\n  const rewardDistributorData = await getRewardDistributor(\n    connection,\n    rewardDistributorId\n  );\n  console.log(\n    `--------- Initialize ${\n      initEntries.length\n    } entries for pool (${stakePoolId.toString()}) and reward distributor (${rewardDistributorId.toString()}) ---------`\n  );\n  const stakeEntryIds = await Promise.all(\n    initEntries.map((e) => findStakeEntryId(stakePoolId, e.mintId))\n  );\n  const stakeEntries = await getStakeEntries(connection, stakeEntryIds);\n  const stakeEntriesById = stakeEntries.reduce(\n    (acc, stakeEntry) =>\n      stakeEntry.parsed\n        ? { ...acc, [stakeEntry.pubkey.toString()]: stakeEntry }\n        : { ...acc },\n    {} as { [id: string]: AccountData<StakeEntryData> }\n  );\n\n  const rewardEntryIds = stakeEntryIds.map((stakeEntryId) =>\n    findRewardEntryId(rewardDistributorId, stakeEntryId)\n  );\n  const rewardEntries = await getRewardEntries(connection, rewardEntryIds);\n  const rewardEntriesById = rewardEntries.reduce(\n    (acc, rewardEntry) =>\n      rewardEntry.parsed\n        ? { ...acc, [rewardEntry.pubkey.toString()]: rewardEntry }\n        : { ...acc },\n    {} as { [id: string]: AccountData<RewardEntryData> }\n  );\n\n  const chunkedEntries = chunkArray(initEntries, args.batchSize);\n  const batchedChunks = chunkArray(chunkedEntries, args.parallelBatchSize);\n  for (let i = 0; i < batchedChunks.length; i++) {\n    const chunk = batchedChunks[i]!;\n    console.log(`\\n\\n\\n ${i + 1}/${batchedChunks.length}`);\n    await Promise.all(\n      chunk.map(async (entries, c) => {\n        const transaction = new Transaction();\n        const entriesInTx: EntryData[] = [];\n\n        let metadata: MetadataJSON[] = [];\n        if (metadataRules) {\n          [metadata] = await fetchMetadata(\n            connection,\n            entries.map((e) => e.mintId)\n          );\n        }\n        for (let j = 0; j < entries.length; j++) {\n          const { mintId, multiplier } = entries[j]!;\n          console.log(\n            `>>[${c + 1}/${chunk.length}][${j + 1}/${\n              entries.length\n            }] (${mintId.toString()})`\n          );\n          try {\n            const stakeEntryId = findStakeEntryId(stakePoolId, mintId);\n\n            await withFindOrInitAssociatedTokenAccount(\n              transaction,\n              connection,\n              mintId,\n              stakeEntryId,\n              wallet.publicKey,\n              true\n            );\n\n            if (!stakeEntriesById[stakeEntryId.toString()]) {\n              await withInitStakeEntry(transaction, connection, wallet, {\n                stakePoolId,\n                originalMintId: mintId,\n              });\n              console.log(\n                `>>[${c + 1}/${chunk.length}][${j + 1}/${\n                  entries.length\n                }] 1. Adding stake entry instruction`\n              );\n            }\n\n            const rewardEntryId = findRewardEntryId(\n              rewardDistributorId,\n              stakeEntryId\n            );\n            const rewardEntry = rewardEntriesById[rewardEntryId.toString()];\n            if (rewardDistributorData && !rewardEntry) {\n              console.log(\n                `>>[${c + 1}/${chunk.length}][${j + 1}/${\n                  entries.length\n                }] 2. Reward entry not found for reward distributor - adding reward entry instruction`\n              );\n              withInitRewardEntry(transaction, connection, wallet, {\n                stakeEntryId,\n                rewardDistributorId,\n              });\n            }\n\n            let multiplierToSet = multiplier;\n            if (metadataRules) {\n              `>>[${c + 1}/${chunk.length}][${j + 1}/${\n                entries.length\n              }] 2.5 Metadata rules are set to override mint multiplier`;\n              const md = metadata[j]!;\n              for (const rule of metadataRules) {\n                if (\n                  md.attributes.find(\n                    (attr) =>\n                      attr.trait_type === rule.traitType &&\n                      attr.value === rule.value\n                  )\n                ) {\n                  multiplierToSet = rule.multiplier;\n                  console.log(\n                    `>>> [${c + 1}/${chunk.length}][${j + 1}/${\n                      entries.length\n                    }] Using metadataRule (${rule.traitType}:${rule.value}=${\n                      rule.multiplier\n                    })`\n                  );\n                }\n              }\n            }\n\n            if (\n              multiplierToSet &&\n              rewardEntry?.parsed.multiplier.toNumber() !== multiplierToSet\n            ) {\n              console.log(\n                `>>[${c + 1}/${chunk.length}][${j + 1}/${\n                  entries.length\n                }] 3. Updating reward entry multipler from  ${\n                  rewardEntry?.parsed.multiplier.toNumber() || 0\n                } => ${multiplierToSet}`\n              );\n              withUpdateRewardEntry(transaction, connection, wallet, {\n                stakePoolId,\n                stakeEntryId,\n                rewardDistributorId,\n                multiplier: new BN(multiplierToSet),\n              });\n            }\n            entriesInTx.push({ mintId });\n          } catch (e: unknown) {\n            console.log(`[fail] (${mintId.toString()})`);\n          }\n        }\n\n        try {\n          if (transaction.instructions.length > 0) {\n            const txid = await executeTransaction(\n              connection,\n              wallet,\n              transaction,\n              {}\n            );\n            console.log(\n              `[success] ${entriesInTx\n                .map((e) => e.mintId.toString())\n                .join()} (https://explorer.solana.com/tx/${txid})`\n            );\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      })\n    );\n  }\n};\n\n"]}