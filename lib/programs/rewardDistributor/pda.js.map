{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../src/programs/rewardDistributor/pda.ts"],"names":[],"mappings":";;;AAAA,kDAAkD;AAClD,6CAA4C;AAE5C,wBAKW;AAEX;;;GAGG;AACI,MAAM,iBAAiB,GAAG,CAC/B,mBAA8B,EAC9B,YAAuB,EACvB,EAAE;IACF,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAiB,CAAC;QAC1C,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,6BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,iBAAiB,qBAY5B;AAEF;;;GAGG;AACI,MAAM,uBAAuB,GAAG,CACrC,WAAsB,EACtB,EAAM,EACN,QAAgB,EAChB,EAAE;IACF,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,MAAM,CAAC,IAAI,CAAC,0BAAuB,CAAC;QACpC,WAAW,CAAC,QAAQ,EAAE;QACtB,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/B,IAAI,WAAE,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KAC9C,EACD,6BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAdW,QAAA,uBAAuB,2BAclC;AAEF;;;GAGG;AACI,MAAM,mBAAmB,GAAG,CAAC,SAAoB,EAAE,EAAE;IAC1D,OAAO,mBAAS,CAAC,sBAAsB,CACrC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAqB,CAAC,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,EACtE,6BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B","sourcesContent":["import { utils, BN } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  REWARD_AUTHORITY_SEED,\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_SEED,\n  REWARD_ENTRY_SEED,\n} from \".\";\n\n/**\n * Finds the reward entry id.\n * @returns\n */\nexport const findRewardEntryId = (\n  rewardDistributorId: PublicKey,\n  stakeEntryId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_ENTRY_SEED),\n      rewardDistributorId.toBuffer(),\n      stakeEntryId.toBuffer(),\n    ],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward distributor id.\n * @returns\n */\nexport const findRewardDistributorId = (\n  stakePoolId: PublicKey,\n  id: BN,\n  duration: number\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(REWARD_DISTRIBUTOR_SEED),\n      stakePoolId.toBuffer(),\n      id.toArrayLike(Buffer, \"le\", 1),\n      new BN(duration).toArrayLike(Buffer, \"le\", 4),\n    ],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward distributor id.\n * @returns\n */\nexport const findRewardAuthority = (authority: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(REWARD_AUTHORITY_SEED), authority.toBuffer()],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n"]}