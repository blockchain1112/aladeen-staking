{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  findMintMetadataId,\n  METADATA_PROGRAM_ID,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { CRANK_KEY, PAYMENT_MANAGER_ADDRESS } from \"@cardinal/payment-manager\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport { tokenManager } from \"@cardinal/token-manager/dist/cjs/programs\";\nimport {\n  getRemainingAccountsForKind,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerKind,\n  TokenManagerState,\n  withRemainingAccountsForReturn,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport {\n  findMintCounterId,\n  findMintManagerId,\n  findTokenManagerAddress,\n  tokenManagerAddressFromMint,\n} from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { ASSOCIATED_PROGRAM_ID } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport {\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport {\n  Keypair,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\n\nimport { getMintSupply } from \"../../utils\";\nimport { getRewardDistributor } from \"../rewardDistributor/accounts\";\nimport { findRewardDistributorId } from \"../rewardDistributor/pda\";\nimport { withClaimRewards } from \"../rewardDistributor/transaction\";\nimport {\n  getPoolIdentifier,\n  getStakeBooster,\n  getStakeEntry,\n  getStakePool,\n} from \"./accounts\";\nimport {\n  ReceiptType,\n  STAKE_BOOSTER_PAYMENT_MANAGER,\n  stakePoolProgram,\n} from \"./constants\";\nimport {\n  findGroupEntryId,\n  findIdentifierId,\n  findStakeAuthorizationId,\n  findStakeBoosterId,\n  findStakePoolId,\n} from \"./pda\";\nimport {\n  findStakeEntryIdFromMint,\n  remainingAccountsForInitStakeEntry,\n  withRemainingAccountsForUnstake,\n} from \"./utils\";\n\n/**\n * Add init pool identifier instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @returns Transaction, public key for the created pool identifier\n */\nexport const withInitPoolIdentifier = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet\n): Promise<[Transaction, PublicKey]> => {\n  const identifierId = findIdentifierId();\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initIdentifier()\n    .accounts({\n      identifier: identifierId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, identifierId];\n};\n\nexport const withInitStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    requiresCollections?: PublicKey[];\n    requiresCreators?: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number[];\n    endDate?: BN;\n    doubleOrResetEnabled?: boolean;\n    taxMint: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const identifierId = findIdentifierId();\n  const identifierData = await tryGetAccount(() =>\n    getPoolIdentifier(connection)\n  );\n  const identifier = identifierData?.parsed.count || new BN(1);\n\n  const program = stakePoolProgram(connection, wallet);\n  if (!identifierData) {\n    const ix = await program.methods\n      .initIdentifier()\n      .accounts({\n        identifier: identifierId,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(ix);\n  }\n\n  const stakePoolId = findStakePoolId(identifier);\n  const ix = await program.methods\n    .initPool({\n      overlayText: params.overlayText || \"STAKED\",\n      imageUri: params.imageUri || \"\",\n      requiresCollections: params.requiresCollections || [],\n      requiresCreators: params.requiresCreators || [],\n      requiresAuthorization: params.requiresAuthorization || false,\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake || false,\n      cooldownSeconds: params.cooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || [],\n      endDate: params.endDate || null,\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\n      taxMint: params.taxMint,\n    })\n    .accounts({\n      stakePool: stakePoolId,\n      identifier: identifierId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, stakePoolId];\n};\n\n/**\n * Add init stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created stake entry\n */\nexport const withInitStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const stakeEntryId = await findStakeEntryIdFromMint(\n    params.stakePoolId,\n    params.originalMintId\n  );\n\n  const originalMintMetadatId = findMintMetadataId(params.originalMintId);\n\n  const remainingAccounts = remainingAccountsForInitStakeEntry(\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initEntry(wallet.publicKey)\n    .accounts({\n      stakeEntry: stakeEntryId,\n      stakePool: params.stakePoolId,\n      originalMint: params.originalMintId,\n      originalMintMetadata: originalMintMetadatId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n  transaction.add(ix);\n  return [transaction, stakeEntryId];\n};\n\n/**\n * Add authorize stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withAuthorizeStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeAuthorizationId = findStakeAuthorizationId(\n    params.stakePoolId,\n    params.originalMintId\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .authorizeMint(params.originalMintId)\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeAuthorizationRecord: stakeAuthorizationId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add authorize stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withDeauthorizeStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeAuthorizationId = findStakeAuthorizationId(\n    params.stakePoolId,\n    params.originalMintId\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .deauthorizeMint()\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeAuthorizationRecord: stakeAuthorizationId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add init stake mint instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, keypair of the created stake mint\n */\nexport const withInitStakeMint = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    stakeMintKeypair: Keypair;\n    name: string;\n    symbol: string;\n  }\n): Promise<[Transaction, Keypair]> => {\n  const [mintManagerId] = await findMintManagerId(\n    params.stakeMintKeypair.publicKey\n  );\n  const originalMintMetadataId = findMintMetadataId(params.originalMintId);\n  const stakeMintMetadataId = findMintMetadataId(\n    params.stakeMintKeypair.publicKey\n  );\n  const stakeEntryStakeMintTokenAccountId = await findAta(\n    params.stakeMintKeypair.publicKey,\n    params.stakeEntryId,\n    true\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initStakeMint({\n      name: params.name,\n      symbol: params.symbol,\n    })\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      originalMint: params.originalMintId,\n      originalMintMetadata: originalMintMetadataId,\n      stakeMint: params.stakeMintKeypair.publicKey,\n      stakeMintMetadata: stakeMintMetadataId,\n      stakeEntryStakeMintTokenAccount: stakeEntryStakeMintTokenAccountId,\n      mintManager: mintManagerId,\n      payer: wallet.publicKey,\n      rent: SYSVAR_RENT_PUBKEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      associatedToken: ASSOCIATED_PROGRAM_ID,\n      tokenMetadataProgram: METADATA_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, params.stakeMintKeypair];\n};\n\n/**\n * Add claim receipt mint instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withClaimReceiptMint = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    receiptMintId: PublicKey;\n    receiptType: ReceiptType;\n  }\n): Promise<Transaction> => {\n  if (\n    params.receiptType === ReceiptType.Original &&\n    (await getMintSupply(connection, params.receiptMintId)).gt(new BN(1))\n  ) {\n    throw new Error(\n      \"Fungible staking and locked reecipt type not supported yet\"\n    );\n  }\n\n  const tokenManagerReceiptMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.receiptMintId,\n      (\n        await findTokenManagerAddress(params.receiptMintId)\n      )[0],\n      wallet.publicKey,\n      true\n    );\n\n  const stakeEntryReceiptMintTokenAccountId = await findAta(\n    params.receiptMintId,\n    params.stakeEntryId,\n    true\n  );\n  const userReceiptMintTokenAccountId = await findAta(\n    params.receiptMintId,\n    wallet.publicKey,\n    true\n  );\n  const [tokenManagerId] = await findTokenManagerAddress(params.receiptMintId);\n  const [mintCounterId] = await findMintCounterId(params.receiptMintId);\n  const remainingAccountsForKind = await getRemainingAccountsForKind(\n    params.receiptMintId,\n    params.receiptType === ReceiptType.Original\n      ? TokenManagerKind.Edition\n      : TokenManagerKind.Managed\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .claimReceiptMint()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      originalMint: params.originalMintId,\n      receiptMint: params.receiptMintId,\n      stakeEntryReceiptMintTokenAccount: stakeEntryReceiptMintTokenAccountId,\n      user: wallet.publicKey,\n      userReceiptMintTokenAccount: userReceiptMintTokenAccountId,\n      tokenManagerReceiptMintTokenAccount:\n        tokenManagerReceiptMintTokenAccountId,\n      tokenManager: tokenManagerId,\n      mintCounter: mintCounterId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      associatedTokenProgram: ASSOCIATED_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n    })\n    .remainingAccounts(remainingAccountsForKind)\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add stake instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withStake = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n    userOriginalMintTokenAccountId: PublicKey;\n    amount?: BN;\n    duration: number;\n  }\n): Promise<Transaction> => {\n  const stakeEntryId = await findStakeEntryIdFromMint(\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const stakeEntryOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      stakeEntryId,\n      wallet.publicKey,\n      true\n    );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .stake(new BN(1), params.duration)\n    .accounts({\n      stakeEntry: stakeEntryId,\n      stakePool: params.stakePoolId,\n      stakeEntryOriginalMintTokenAccount: stakeEntryOriginalMintTokenAccountId,\n      originalMint: params.originalMintId,\n      user: wallet.publicKey,\n      userOriginalMintTokenAccount: params.userOriginalMintTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(ix);\n\n  return transaction;\n};\n\n/**\n * Add unstake instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withUnstake = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    distributorIds: BN[];\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n    skipRewardMintTokenAccount?: boolean;\n  }\n): Promise<Transaction> => {\n  if (params.distributorIds.length === 0)\n    throw new Error(\"empty distributorIds\");\n  const stakeEntryId = await findStakeEntryIdFromMint(\n    params.stakePoolId,\n    params.originalMintId\n  );\n  const [stakeEntryData] = await Promise.all([\n    tryGetAccount(() => getStakeEntry(connection, stakeEntryId)),\n  ]);\n  for (const rewardDistributorIndex of params.distributorIds) {\n    if (rewardDistributorIndex === undefined) continue;\n    const rewardDistributorId = findRewardDistributorId(\n      params.stakePoolId,\n      rewardDistributorIndex\n    );\n\n    const [rewardDistributorData] = await Promise.all([\n      tryGetAccount(() =>\n        getRewardDistributor(connection, rewardDistributorId)\n      ),\n    ]);\n\n    if (!stakeEntryData) throw \"Stake entry not found\";\n\n    const stakePoolData = await getStakePool(connection, params.stakePoolId);\n\n    if (\n      (!stakePoolData.parsed.cooldownSeconds ||\n        stakePoolData.parsed.cooldownSeconds === 0 ||\n        (stakeEntryData?.parsed.cooldownStartSeconds &&\n          Date.now() / 1000 -\n            stakeEntryData.parsed.cooldownStartSeconds.toNumber() >=\n            stakePoolData.parsed.cooldownSeconds)) &&\n      (!stakePoolData.parsed.minStakeSeconds ||\n        stakePoolData.parsed.minStakeSeconds === 0 ||\n        (stakeEntryData?.parsed.lastStakedAt &&\n          Date.now() / 1000 - stakeEntryData.parsed.lastStakedAt.toNumber() >=\n            stakePoolData.parsed.minStakeSeconds)) &&\n      (stakeEntryData.parsed.originalMintClaimed ||\n        stakeEntryData.parsed.stakeMintClaimed)\n    ) {\n      // return receipt mint if its claimed\n      await withReturnReceiptMint(transaction, connection, wallet, {\n        stakeEntryId: stakeEntryId,\n      });\n    }\n\n    // claim any rewards deserved\n    if (rewardDistributorData) {\n      await withClaimRewards(transaction, connection, wallet, {\n        distributorId: rewardDistributorIndex,\n        stakePoolId: params.stakePoolId,\n        stakeEntryId: stakeEntryId,\n        lastStaker: wallet.publicKey,\n        skipRewardMintTokenAccount: params.skipRewardMintTokenAccount,\n      });\n    }\n  }\n\n  const stakeEntryOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      stakeEntryId,\n      wallet.publicKey,\n      true\n    );\n\n  const userOriginalMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      params.originalMintId,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n\n  const remainingAccounts = await withRemainingAccountsForUnstake(\n    transaction,\n    connection,\n    wallet,\n    stakeEntryId,\n    stakeEntryData?.parsed.stakeMint\n  );\n\n  const stakePoolData = await getStakePool(connection, params.stakePoolId);\n  const taxMint = stakePoolData.parsed.taxMint;\n  const taxMintTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    taxMint,\n    wallet.publicKey,\n    wallet.publicKey\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .unstake()\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeEntry: stakeEntryId,\n      originalMint: params.originalMintId,\n      stakeEntryOriginalMintTokenAccount: stakeEntryOriginalMintTokenAccountId,\n      user: wallet.publicKey,\n      userOriginalMintTokenAccount: userOriginalMintTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      taxMint,\n      taxMintTokenAccount,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n  transaction.add(ix);\n\n  return transaction;\n};\n\nexport const withUpdateStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    requiresCollections?: PublicKey[];\n    requiresCreators?: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    endDate?: BN;\n    doubleOrResetEnabled?: boolean;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .updatePool({\n      imageUri: params.imageUri || \"\",\n      overlayText: params.overlayText || \"STAKED\",\n      requiresCollections: params.requiresCollections || [],\n      requiresCreators: params.requiresCreators || [],\n      requiresAuthorization: params.requiresAuthorization || false,\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake || false,\n      cooldownSeconds: params.cooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n      endDate: params.endDate || null,\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\n    })\n    .accounts({\n      stakePool: params.stakePoolId,\n      payer: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, params.stakePoolId];\n};\n\nexport const withUpdateTotalStakeSeconds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    lastStaker: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .updateTotalStakeSeconds()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      lastStaker: params.lastStaker,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withReturnReceiptMint = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, params.stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    throw new Error(`Stake entry ${params.stakeEntryId.toString()} not found`);\n  }\n\n  if (\n    !stakeEntryData.parsed.stakeMintClaimed &&\n    !stakeEntryData.parsed.originalMintClaimed\n  ) {\n    console.log(\"No receipt mint to return\");\n    return transaction;\n  }\n\n  const receiptMint =\n    stakeEntryData.parsed.stakeMint && stakeEntryData.parsed.stakeMintClaimed\n      ? stakeEntryData.parsed.stakeMint\n      : stakeEntryData.parsed.originalMint;\n\n  const tokenManagerId = await tokenManagerAddressFromMint(\n    connection,\n    receiptMint\n  );\n  const tokenManagerData = await tryGetAccount(() =>\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId)\n  );\n\n  if (!tokenManagerData) {\n    return transaction;\n  }\n\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData\n  );\n  const tokenManagerTokenAccountId = await findAta(\n    receiptMint,\n    tokenManagerData.pubkey,\n    true\n  );\n  const userReceiptMintTokenAccountId = await findAta(\n    receiptMint,\n    wallet.publicKey,\n    true\n  );\n  const transferAccounts = await getRemainingAccountsForKind(\n    receiptMint,\n    tokenManagerData.parsed.kind\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .returnReceiptMint()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      receiptMint: receiptMint,\n      tokenManager: tokenManagerData.pubkey,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      userReceiptMintTokenAccount: userReceiptMintTokenAccountId,\n      user: wallet.publicKey,\n      collector: CRANK_KEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      rent: SYSVAR_RENT_PUBKEY,\n    })\n    .remainingAccounts([\n      ...(tokenManagerData.parsed.state === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...remainingAccountsForReturn,\n    ])\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakePool()\n    .accounts({\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakeEntry()\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withReassignStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    target: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .reassignStakeEntry({ target: params.target })\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      lastStaker: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withDoubleOrResetTotalStakeSeconds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .doubleOrResetTotalStakeSeconds()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      lastStaker: wallet.publicKey,\n      recentSlothashes: SYSVAR_SLOT_HASHES_PUBKEY,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withInitStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    paymentAmount: BN;\n    paymentMint: PublicKey;\n    boostSeconds: BN;\n    startTimeSeconds: number;\n    payer?: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initStakeBooster({\n      stakePool: params.stakePoolId,\n      identifier: params.stakeBoosterIdentifier || new BN(0),\n      paymentAmount: params.paymentAmount,\n      paymentMint: params.paymentMint,\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\n      boostSeconds: params.boostSeconds,\n      startTimeSeconds: new BN(params.startTimeSeconds),\n    })\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withUpdateStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    paymentAmount: BN;\n    paymentMint: PublicKey;\n    boostSeconds: BN;\n    startTimeSeconds: number;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .updateStakeBooster({\n      paymentAmount: params.paymentAmount,\n      paymentMint: params.paymentMint,\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\n      boostSeconds: params.boostSeconds,\n      startTimeSeconds: new BN(params.startTimeSeconds),\n    })\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakeBooster()\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withBoostStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    payerTokenAccount: PublicKey;\n    payer?: PublicKey;\n    secondsToBoost: BN;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n\n  const stakeBooster = await getStakeBooster(connection, stakeBoosterId);\n  const paymentManager = await getPaymentManager(\n    connection,\n    stakeBooster.parsed.paymentManager\n  );\n  const feeCollectorTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    stakeBooster.parsed.paymentMint,\n    paymentManager.parsed.feeCollector,\n    params.payer ?? wallet.publicKey\n  );\n  const paymentRecipientTokenAccount =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      stakeBooster.parsed.paymentMint,\n      stakeBooster.parsed.paymentRecipient,\n      params.payer ?? wallet.publicKey\n    );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .boostStakeEntry({ secondsToBoost: params.secondsToBoost })\n    .accounts({\n      stakeBooster: stakeBooster.pubkey,\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      originalMint: params.originalMintId,\n      payerTokenAccount: params.payerTokenAccount,\n      paymentRecipientTokenAccount: paymentRecipientTokenAccount,\n      payer: wallet.publicKey,\n      paymentManager: stakeBooster.parsed.paymentManager,\n      feeCollectorTokenAccount: feeCollectorTokenAccount,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add init group stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withInitGroupStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupCooldownSeconds?: number;\n    groupStakeSeconds?: number;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const id = Keypair.generate();\n  const program = stakePoolProgram(connection, wallet);\n  const groupEntryId = findGroupEntryId(id.publicKey);\n  const ix = await program.methods\n    .initGroupEntry({\n      groupId: id.publicKey,\n      groupCooldownSeconds: params.groupCooldownSeconds || null,\n      groupStakeSeconds: params.groupStakeSeconds || null,\n    })\n    .accounts({\n      groupEntry: groupEntryId,\n      authority: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, groupEntryId];\n};\n\n/**\n * Add a stake entry to the group entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withAddToGroupEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n    payer?: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .addToGroupEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n      payer: params.payer ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\n/**\n * Remove stake entry from the group entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withRemoveFromGroupEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .removeFromGroupEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\n/**\n * Add init ungrouping instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withInitUngrouping = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initUngrouping()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\nexport const withClaimStakeEntryFunds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  stakeEntryId: PublicKey,\n  fundsMintId: PublicKey\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    throw `No stake entry id with address ${stakeEntryId.toString()}`;\n  }\n\n  const stakeEntryFundsMintTokenAccountId = getAssociatedTokenAddressSync(\n    fundsMintId,\n    stakeEntryId,\n    true\n  );\n\n  const userFundsMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      fundsMintId,\n      stakeEntryData.parsed.lastStaker,\n      wallet.publicKey,\n      true\n    );\n\n  const ix = await program.methods\n    .claimStakeEntryFunds()\n    .accounts({\n      fundsMint: fundsMintId,\n      stakeEntryFundsMintTokenAccount: stakeEntryFundsMintTokenAccountId,\n      userFundsMintTokenAccount: userFundsMintTokenAccountId,\n      stakePool: stakeEntryData.parsed.pool,\n      stakeEntry: stakeEntryId,\n      originalMint: stakeEntryData.parsed.originalMint,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n"]}