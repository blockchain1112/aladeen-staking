{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAM,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EACL,qBAAqB,EACrB,0BAA0B,EAC1B,uBAAuB,EACvB,iBAAiB,GAClB,MAAM,GAAG,CAAC;AAEX;;;GAGG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,mBAA8B,EAC9B,YAAuB,EACvB,EAAE;IACF,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAC1C,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,WAAsB,EAAE,EAAM,EAAE,EAAE;IACxE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;QAChD,WAAW,CAAC,QAAQ,EAAE;QACtB,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KAChC,EACD,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,SAAoB,EAAE,EAAE;IAC1D,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,EACtE,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils, BN } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  REWARD_AUTHORITY_SEED,\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_SEED,\n  REWARD_ENTRY_SEED,\n} from \".\";\n\n/**\n * Finds the reward entry id.\n * @returns\n */\nexport const findRewardEntryId = (\n  rewardDistributorId: PublicKey,\n  stakeEntryId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_ENTRY_SEED),\n      rewardDistributorId.toBuffer(),\n      stakeEntryId.toBuffer(),\n    ],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward distributor id.\n * @returns\n */\nexport const findRewardDistributorId = (stakePoolId: PublicKey, id: BN) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_DISTRIBUTOR_SEED),\n      stakePoolId.toBuffer(),\n      id.toArrayLike(Buffer, \"le\", 8),\n    ],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward distributor id.\n * @returns\n */\nexport const findRewardAuthority = (authority: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(REWARD_AUTHORITY_SEED), authority.toBuffer()],\n    REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n"]}