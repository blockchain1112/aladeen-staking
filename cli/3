// this script will parse a config

import { Wallet } from "@project-serum/anchor";
import {
  Transaction,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  Signer,
  sendAndConfirmRawTransaction,
  SendTransactionError,
  PublicKey,
} from "@solana/web3.js";

import { createStakePool } from "../src";

import { config, UiConfig } from "./config";

export type CardinalProvider = {
  connection: Connection;
  wallet: Wallet;
};

export function getConnection(): Connection {
  const url = "http://127.0.0.1:8899";
  return new Connection(url, "confirmed");
}

export async function newAccountWithLamports(
  connection: Connection,
  lamports = LAMPORTS_PER_SOL * 10,
  keypair = Keypair.generate()
): Promise<Keypair> {
  const account = keypair;
  const signature = await connection.requestAirdrop(
    account.publicKey,
    lamports
  );
  await connection.confirmTransaction(signature, "confirmed");
  return account;
}

export async function getProvider(): Promise<CardinalProvider> {
  const connection = getConnection();
  const keypair = await newAccountWithLamports(connection);
  const wallet = new Wallet(keypair);
  return {
    connection,
    wallet,
  };
}

export async function executeTransactions(
  connection: Connection,
  txs: Transaction[],
  wallet: Wallet,
  config?: { signers?: Signer[]; silent?: boolean }
): Promise<string[]> {
  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;
  const signedTxs = await wallet.signAllTransactions(
    txs.map((tx) => {
      tx.recentBlockhash = latestBlockhash;
      tx.feePayer = wallet.publicKey;
      if (config?.signers) {
        tx.partialSign(...(config?.signers ?? []));
      }
      return tx;
    })
  );
  const txids = await Promise.all(
    signedTxs.map(async (tx) => {
      try {
        const txid = await sendAndConfirmRawTransaction(
          connection,
          tx.serialize()
        );
        return txid;
      } catch (e) {
        if (!config?.silent) {
          handleError(e);
        }
        throw e;
      }
    })
  );
  return txids;
}

(async () => {
  const provider = await getProvider();

  let uiConfig: UiConfig = {};

  let transactions: Transaction[] = [];

  for (const scope in config.scopes) {
    const [transaction, stakePoolId] = await createStakePool(
      provider.connection,
      provider.wallet,
      {
        taxMint: new PublicKey(""),
      }
    );
    transactions.push(transaction);

    uiConfig[stakePoolId.toString()] = {
      rewardDistributors: [],
    };
  }

  await executeTransactions(provider.connection, transactions, provider.wallet);
})();

export const handleError = (e: any) => {
  const message = (e as SendTransactionError).message ?? "";
  const logs = (e as SendTransactionError).logs;
  if (logs) {
    console.error(logs, message);
  } else {
    console.error(e, message);
  }
};
